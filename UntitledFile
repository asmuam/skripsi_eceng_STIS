/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var sbwp = ee.FeatureCollection("projects/ee-222111840/assets/rawa_pening_sbwp"),
    rf = ee.Image("projects/ee-222111840/assets/rf"),
    cnn1d = ee.Image("projects/ee-222111840/assets/cnn1"),
    roi = ee.FeatureCollection("projects/ee-222111840/assets/roi"),
    image = ee.Image("projects/ee-222111840/assets/rawa_pening_image");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Function to create the intro panel with labels.
function panelcreate() {
    // Create an intro panel with labels.
    var intro = ui.Panel([
        ui.Label({
            value: 'Sebaran Eceng Gondok',
            style: {
                fontSize: '1.4vw',
                fontWeight: 'bold',
                textAlign: 'center',
                stretch: 'horizontal'
            },
        }),
        ui.Label({
            value: 'Danau Rawa Pening 2024',
            style: {
                fontSize: '1.4vw',
                fontWeight: 'bold',
                textAlign: 'center',
                stretch: 'horizontal'
            },
        }),
        ui.Label({
            value: 'Aplikasi ini memvisualisasikan hasil klasifikasi area Danau Rawa Pening. ' +
           'Klasifikasi dilakukan menggunakan metode machine learning Random Forest (RF) dan deep learning CNN1D. ' +
           'Data citra satelit Sentinel-1 dan Sentinel-2 digunakan untuk ekstraksi pita dan indeks spektral. ' +
           'Hasil klasifikasi mencakup enam kelas:',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: '0. Eceng Gondok',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal',
                padding: '0',
                margin: '0px 0px 0px 8px'
            },
        }),
        ui.Label({
            value: '1. Keramba Jaring Apung',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal',
                margin: '0px 0px 0px 8px'
            },
        }),
        ui.Label({
            value: '2. Air',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal',
                margin: '0px 0px 0px 8px'
            },
        }),
        ui.Label({
            value: '3. Vegetasi lain',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal',
                margin: '0px 0px 0px 8px'
            },
        }),
        ui.Label({
            value: '4. Tanah',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal',
                margin: '0px 0px 0px 8px'
            },
        }),
        ui.Label({
            value: '5. Lain-lain',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal',
                margin: '0px 0px 0px 8px'
            },
        }),
        ui.Label({
            value: 'Klik pada titik untuk melihat klasifikasi, nilai indeks spektral, dan detail lain dari piksel terpilih',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: 'Peta batas wilayah penelitian bersumber dari Peta Sub-Batas Wilayah '+
            'Perencanaan Danau Rawa Pening yang diterbitkan oleh Balai Besar Wilayah Sungai '+
            'Pemali Juana.',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: 'Lapisan data (layer) dapat diganti melalui panel legenda.',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
    ]);

    // Add intro panel to the main panel.
    introPanel.add(intro);
}
// Function to create reference panel.
function referencecreate() {
    var referenceZero = ui.Label({
        value: 'Data Tambahan:',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'left'
        },
    });
    var referenceOne = ui.Label({
        value: 'üìÅ Aset Balai Besar Wilayah Sungai Pemali Juana',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'left'
        },
        targetUrl: 'drive.google.com'
    });
    var referenceTwo = ui.Label({
        value: 'üíª Kode Python untuk Pengolahan',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'left',
            padding: '0px 0px 4px 0px'
        },
        targetUrl: 'https://colab.research.google.com/drive/1DCOyKQ2XWKaLIT7h8__X5uc6QrxCeyCb#scrollTo=OhQrbdyR-Y_k&uniqifier=2'
    });
    var referenceThree = ui.Label({
        value: 'Created by:',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'center'
        },
    });
    var author = ui.Label({
        value: '222111840@stis.ac.id',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'center'
        },
        targetUrl: 'mailto:222111840@stis.ac.id'
    });

    // Add reference to the panel.
    introPanel.add(referenceZero);
    introPanel.add(referenceOne);
    introPanel.add(referenceTwo);
    introPanel.add(referenceThree);
    introPanel.add(author);
}
// Redraw function is called when the user changes the selected layer.
function redraw(layer, opacity) {
    // Fetch the info that corresponds to the selected layer
    var info = dataInfo[layer];

    // Reset the layers and the legend
    map.layers().reset();
    legend.clear();
    map.addLayer(sbwp);

    // Construct the layer selection widgets
    legend.add(
        ui.Label({
            value: 'Choose display layer:',
            style: {
                fontSize: '14px',
                fontWeight: 'bold',
                textAlign: 'left',
                margin: '4px 0px'
            },
        })
    )
    .add(select);

    // Add opacity slider to the legend
    legend.add(
        ui.Label({
            value: 'Adjust Opacity:',
            style: {
                fontSize: '14px',
                fontWeight: 'bold',
                textAlign: 'left',
                margin: '4px 0px'
            },
        })
    )
    .add(opacitySlider);

    // If the selected layer is "none", just reset and return
    if (layer === 'none') {
        return;
    }

    // Construct the visualization image only for layers other than "none"
    var visImg = info.img.visualize(info.vis);

    // Apply opacity from the slider to the visualization image
    visImg = visImg.set('opacity', opacity);

    // If the selected layer is "citra" or "radar", reset and skip legend creation
    if (layer === 'citra' || layer === 'radar') {
        if (layer !== 'none') {
            // Add the layer for "citra" without a legend
            legend.add(
                ui.Label({
                    value: info.desc,
                    style: {
                        fontSize: '14px',
                        fontWeight: 'bold',
                        textAlign: 'left',
                        margin: '4px 0px'
                    },
                })
            );
            map.addLayer(visImg, {}, layer);
        }
        return;
    }

    // Construct the legend for "cnn1d" or "rf"
    legend
        .add(
            ui.Label({
                value: info.desc, // Add the description of the selected layer
                style: {
                    fontSize: '14px',
                    fontWeight: 'bold',
                    textAlign: 'left',
                    margin: '4px 0px'
                },
            })
        );

    // Add the labels corresponding to the classes
    var classLabels = [
        'Eceng Gondok',
        'Keramba Jaring Apung',
        'Air',
        'Vegetasi Lain',
        'Tanah',
        'Lain-lain'
    ];

    var classColors = info.vis.palette; // Use the palette from dataInfo

    // Add each label with its corresponding color box
    classLabels.forEach(function (label, index) {
        var colorBox = ui.Label({
            style: {
                backgroundColor: classColors[index],
                padding: '8px',
                margin: '4px',
                border: '1px solid black',
                width: '20px',
                height: '20px',
            }
        });

        var textLabel = ui.Label({
            value: index + ': ' + label,
            style: {
                margin: '4px 0px',
                fontSize: '12px',
                padding: '0 4px'
            }
        });

        var legendItem = ui.Panel({
            widgets: [colorBox, textLabel],
            layout: ui.Panel.Layout.flow('horizontal'),
            style: { margin: '4px 0px' }
        });

        legend.add(legendItem);
    });

    // Add the layer to the map, for layers other than "none" or "citra"
    if (layer !== 'none') {
        map.addLayer(visImg, {}, layer);
    }
}

