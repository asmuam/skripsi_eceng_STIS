/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = 
    /* color: #ff9797 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[110.40784518497604, -7.261173849220073],
          [110.40784518497604, -7.313959002794661],
          [110.45934359806198, -7.313959002794661],
          [110.45934359806198, -7.261173849220073]]], null, false),
    shapefile = ee.FeatureCollection("projects/ee-222111840/assets/rawa_pening"),
    bbws = ee.Image("projects/ee-222111840/assets/rawa_pening_bbws");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Fungsi untuk mendapatkan citra dengan tanggal paling dekat atau sesuai targetDate
function getClosestImage(collection, targetDate) {
  return collection
    .map(function (image) {
      var imageDate = ee.Date(image.get('system:time_start')) // Gunakan system:time_start
      var diff = ee.Number(imageDate.difference(targetDate, 'day')).abs() // Selisih waktu
      return image.set('date_diff', diff)
    })
    .sort('date_diff')
    .first() // Citra dengan selisih waktu terkecil
}
// Fungsi untuk masking cloud Sentinel-2 dengan mempertahankan properti awal
function maskS2clouds(image) {
  var qa = image.select('QA60')
  var cloudBitMask = 1 << 10
  var cirrusBitMask = 1 << 11
  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0))
  var maskedImage = image.updateMask(mask).divide(10000)
  return maskedImage.copyProperties(image, image.propertyNames())
}
// Fungsi untuk mencocokkan citra berdasarkan tanggal
function findMatchingDates(s1Collection, s2Collection) {
  // Ambil daftar tanggal dari Sentinel-1 dan Sentinel-2
  var s1Dates = s1Collection.aggregate_array('system:time_start');
  var s2Dates = s2Collection.aggregate_array('system:time_start');
  // Ubah ke format tanggal untuk pencocokan
  s1Dates = s1Dates.map(function(date) { return ee.Date(date).format('YYYY-MM-dd'); });
  s2Dates = s2Dates.map(function(date) { return ee.Date(date).format('YYYY-MM-dd'); });
  // Temukan irisan antara dua koleksi berdasarkan tanggal
  var commonDates = s1Dates.filter(ee.Filter.inList('item', s2Dates));
    // Urutkan tanggal berdasarkan yang terbaru
  commonDates = commonDates.sort();
  return commonDates;
}
// daerah danau
var danau = roi.difference(shapefile.geometry(), ee.ErrorMargin(1));
// Tentukan tanggal tetap untuk citra ()
var targetDate = ee.Date('2024-7-15')
var range = 20
// Koleksi Sentinel-2 pada tanggal 20 Juni 2024
var sentinel2 = ee
  .ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterBounds(roi)
  .filterDate(targetDate.advance(-range, 'day'), targetDate.advance(range, 'day')) // Citra untuk satu hari
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10)) // Filter untuk awan rendah
  .map(maskS2clouds)
  .sort('system:time_start') // Urutkan berdasarkan waktu citra
// Koleksi Sentinel-1 pada tanggal 20 Juni 2024
var sentinel1 = ee
  .ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(targetDate.advance(-range, 'day'), targetDate.advance(range, 'day')) // Citra untuk satu hari
// Contoh penggunaan fungsi dengan koleksi S1 dan S2
var matchingDates = findMatchingDates(sentinel1, sentinel2);

print(matchingDates)