/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var dji0095 = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.447865194444, -7.26668133333333]),
        {
          "system:index": "0"
        }),
    dji0121 = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.42236875, -7.30435008333333]),
        {
          "system:index": "0"
        }),
    dji0122 = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.42288325, -7.30369816666667]),
        {
          "system:index": "0"
        }),
    dji0120 = 
    /* color: #9999ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.422376305556, -7.30434944444444]),
        {
          "system:index": "0"
        }),
    dji0119 = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.423018694444, -7.30536213888889]),
        {
          "system:index": "0"
        }),
    dji0117 = 
    /* color: #99ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.4230205, -7.30536827777778]),
        {
          "system:index": "0"
        }),
    dji0114 = 
    /* color: #ff99ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.447676388889, -7.27494127777778]),
        {
          "system:index": "0"
        }),
    dji0113 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.44744425, -7.2780285]),
        {
          "system:index": "0"
        }),
    dji0112 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.447443305556, -7.27802783333333]),
        {
          "system:index": "0"
        }),
    dji0110 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.444154055556, -7.27244091666667]),
        {
          "system:index": "0"
        }),
    dji0109 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.444274138889, -7.27224408333333]),
        {
          "system:index": "0"
        }),
    dji0108 = 
    /* color: #00ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.444194694444, -7.27237541666667]),
        {
          "system:index": "0"
        }),
    dji0107 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.4443155, -7.27217716666667]),
        {
          "system:index": "0"
        }),
    dji0104 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445214694444, -7.27086080555556]),
        {
          "system:index": "0"
        }),
    dji0103 = 
    /* color: #00ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445219527778, -7.27086544444444]),
        {
          "system:index": "0"
        }),
    dji0102 = 
    /* color: #0000ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445221722222, -7.27086591666667]),
        {
          "system:index": "0"
        }),
    dji0101 = 
    /* color: #999900 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.4452205, -7.27086597222222]),
        {
          "system:index": "0"
        }),
    dji0100 = 
    /* color: #009999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445177305556, -7.27091152777778]),
        {
          "system:index": "0"
        }),
    dji0099 = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445177916667, -7.27091080555556]),
        {
          "system:index": "0"
        }),
    dji0098 = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445179055556, -7.27091097222222]),
        {
          "system:index": "0"
        }),
    dji0097 = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445178666667, -7.27091072222222]),
        {
          "system:index": "0"
        }),
    dji0096 = 
    /* color: #9999ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([110.445178916667, -7.27091152777778]),
        {
          "system:index": "0"
        }),
    dji0118 = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.LineString(
            [[110.42302, -7.30537],
             [110.42302, -7.30536]]),
        {
          "system:index": "0"
        }),
    dji0116 = 
    /* color: #99ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.LineString(
            [[110.44773, -7.26692],
             [110.44733, -7.26775]]),
        {
          "system:index": "0"
        }),
    dji0115 = 
    /* color: #ff99ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.LineString(
            [[110.44744, -7.2718],
             [110.44723, -7.26878]]),
        {
          "system:index": "0"
        }),
    dji0111 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.LineString(
            [[110.44416, -7.27244],
             [110.44416, -7.27244]]),
        {
          "system:index": "0"
        }),
    dji0106 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.LineString(
            [[110.44461, -7.27209],
             [110.44461, -7.27209]]),
        {
          "system:index": "0"
        }),
    dji0105 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.LineString(
            [[110.44778, -7.26694],
             [110.44579, -7.27079]]),
        {
          "system:index": "0"
        }),
    roi = ee.FeatureCollection("projects/ee-222111840/assets/rawa_pening_shp");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// function maskS2clouds(image) {
//   var qa = image.select("QA60");
//   var cloudBitMask = 1 << 10;
//   var cirrusBitMask = 1 << 11;
//   var mask = qa
//     .bitwiseAnd(cloudBitMask)
//     .eq(0)
//     .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
//   var maskedImage = image.updateMask(mask).divide(10000);
//   return maskedImage.copyProperties(image, image.propertyNames());
// }

// function clear_percentage(image, roi) {
//   // Select QA60 band untuk deteksi awan
//   var qa = image.select("QA60");
//   var cloudBitMask = 1 << 10;
//   var cirrusBitMask = 1 << 11;
  
//   // Membuat mask untuk piksel yang bukan awan
//   var mask = qa
//     .bitwiseAnd(cloudBitMask)
//     .eq(0)
//     .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  
//   // 1. Hitung total piksel di ROI menggunakan QA60
//   var totalPixels = image.select('QA60')
//     .unmask(1) // Memastikan semua piksel dihitung
//     .clip(roi)
//     .reduceRegion({
//       reducer: ee.Reducer.count(),
//       geometry: roi,
//       scale: 10, // Menggunakan skala 10 meter untuk akurasi
//       maxPixels: 1e9
//     }).values().get(0);
  
//   // 2. Hitung piksel awan (piksel yang tidak lolos mask)
//   var cloudPixels = ee.Image(1)
//     .updateMask(mask.not())
//     .clip(roi)
//     .reduceRegion({
//       reducer: ee.Reducer.count(),
//       geometry: roi,
//       scale: 10, // Konsisten dengan skala 10 meter
//       maxPixels: 1e9
//     }).values().get(0);
  
//   // 3. Hitung rasio piksel awan
//   var cloudRatio = ee.Number(cloudPixels).divide(ee.Number(totalPixels));
  
//   // 4. Hitung persentase piksel clear (1 - rasio awan)
//   var clearPercentage = ee.Number(1).subtract(cloudRatio);
  
//   // Menerapkan mask dan normalisasi setelah perhitungan rasio
//   // var maskedImage = image.updateMask(mask).divide(10000);
//   var maskedImage = image.divide(10000);
  
//   // Menambahkan properti untuk debugging
//   return maskedImage
//     .copyProperties(image, image.propertyNames())
//     .set({
//       'clear_percentage': clearPercentage,
//       'cloud_pixels': cloudPixels,
//       'total_pixels': totalPixels,
//       'cloud_ratio': cloudRatio
//     });
// } // QA60

function clear_percentage(image, roi) {
  // Select SCL band untuk deteksi bayangan awan dari citra Sentinel-2
  var scl = image.select("SCL");
  var cloudShadowValue = 3; // Nilai SCL untuk bayangan awan
  
  // Select MSK_CLDPRB band untuk deteksi awan
  var cloudProb = image.select("MSK_CLDPRB");
  var cloudThreshold = 5; // Ambang batas probabilitas awan (0-100)
  
  // Membuat mask untuk piksel yang bukan awan (MSK_CLDPRB < threshold) dan bukan bayangan awan (SCL != 3)
  var cloudMask = cloudProb.lt(cloudThreshold);
  var shadowMask = scl.neq(cloudShadowValue);
  // var mask = cloudMask.and(shadowMask);
  var mask = cloudMask;
  
  // 1. Hitung total piksel di ROI menggunakan SCL
  var totalPixels = image.select('SCL')
    .unmask(1) // Memastikan semua piksel dihitung
    .clip(roi)
    .reduceRegion({
      reducer: ee.Reducer.count(),
      geometry: roi,
      scale: 20, // Skala 20 meter sesuai SCL dan MSK_CLDPRB
      maxPixels: 1e9
    }).values().get(0);
  
  // 2. Hitung piksel awan dan bayangan awan (piksel yang tidak lolos mask)
  var cloudShadowPixels = ee.Image(1)
    .updateMask(mask.not()) // Piksel yang dianggap awan atau bayangan awan
    .clip(roi)
    .reduceRegion({
      reducer: ee.Reducer.count(),
      geometry: roi,
      scale: 20, // Konsisten dengan skala 20 meter
      maxPixels: 1e9
    }).values().get(0);
  
  // 3. Hitung rasio piksel awan dan bayangan awan
  var cloudShadowRatio = ee.Number(cloudShadowPixels).divide(ee.Number(totalPixels));
  
  // 4. Hitung persentase piksel clear (1 - rasio awan dan bayangan)
  var clearPercentage = ee.Number(1).subtract(cloudShadowRatio);
  
  // Menerapkan mask dan normalisasi
  var maskedImage = image.updateMask(mask).divide(10000);
  // var maskedImage = image.divide(10000);
  
  // Menambahkan properti untuk debugging
  return maskedImage
    .copyProperties(image, image.propertyNames())
    .set({
      'clear_percentage': clearPercentage,
      'cloud_shadow_pixels': cloudShadowPixels,
      'total_pixels': totalPixels,
      'cloud_shadow_ratio': cloudShadowRatio,
      'cloud_threshold': cloudThreshold
    });
} // MSK_CLDPRB & SCL

var sentinel2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')             // Sentinel-2
  .filterBounds(roi)
  .filterDate('2024-1-01', '2024-12-31')
  // .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))
  .filter(ee.Filter.eq('SENSING_ORBIT_DIRECTION', 'DESCENDING'))
  // .map(maskS2clouds)
  .map(function(image) {
    return clear_percentage(image, roi); // Teruskan roi ke fungsi
  })
  .filter(ee.Filter.gte('clear_percentage', 1))
  .sort('system:time_start')
  // .sort('CLOUDY_PIXEL_PERCENTAGE');
  
var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')                       // Sentinel-1
  .filterBounds(roi)
  .filterDate('2024-1-01', '2024-12-31')
  .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
  
var sentinel2List = sentinel2.toList(sentinel2.size());                       // Image selection
var sentinel1List = sentinel1.toList(sentinel1.size());                       // Image selection

print("sentinel 1 :")
print(sentinel1List)
print("sentinel 2 :")
print(sentinel2List)

var sentinel2Imagedesc = ee.Image(sentinel2List.get(11)); 

var rgbVis = {
  bands: ['B4', 'B3', 'B2'], // RGB (Red, Green, Blue)
  min: 0,
  max: 0.3,
};

Map.addLayer(sentinel2Imagedesc, rgbVis, 'Sentinel-2 RGB');

// var count = sentinel2List.size().getInfo(); // Ambil jumlah elemen
// for (var i = 0; i < count; i++) {
//   var image = ee.Image(sentinel2List.get(i));
//   var index = image.get('system:index'); // Dapatkan indeks citra
  
//   // Ambil tanggal akuisisi
//   var date = ee.Date(image.get('system:time_start')).format('YYYY-MM-dd').getInfo();
  
//   // Tambahkan layer dengan nama yang mencantumkan tanggal
//   Map.addLayer(image, rgbVis, 'Sentinel-2 RGB ' + index + ' (' + date + ')');
// }

// Fungsi format tanggal dd/mm/yyyy
function formatDate(date) {
  var day = String(date.getDate()).padStart(2, '0');
  var month = String(date.getMonth() + 1).padStart(2, '0');
  var year = date.getFullYear();
  return day + '/' + month + '/' + year;
}

// Konversi koleksi citra ke list dan tambahkan ke peta
sentinel2List.evaluate(function(images) {
  images.forEach(function(imageInfo) {
    // Ekstrak informasi citra
    var image = ee.Image(imageInfo.id);
    var sysIndex = imageInfo.properties['system:index'];
    var timestamp = imageInfo.properties['system:time_start'];
    
    // Format tanggal
    var date = new Date(timestamp);
    var formattedDate = formatDate(date);
    
    // Buat nama layer
    var layerName = 'Sentinel 2 ' + formattedDate;
    
    // Tambahkan ke peta dengan visualisasi RGB
    Map.addLayer(image, rgbVis, layerName);
  });
});

Map.addLayer(roi, {color: 'red'}, 'ROI');
