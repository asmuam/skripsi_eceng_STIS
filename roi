/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = /* color: #d63000 */ee.Geometry.Polygon(
        [[[110.4071587047578, -7.31436695571265],
          [110.46174673105065, -7.314366955929029],
          [110.46174673238838, -7.259027869349942],
          [110.40715870386597, -7.259027869133561],
          [110.4071587047578, -7.31436695571265]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Fungsi untuk mendapatkan citra dengan tanggal paling dekat
function getClosestImage(collection, targetDate) {
  return collection.map(function(image) {
    var imageDate = ee.Date(image.get('system:time_start')); // Gunakan system:time_start
    var diff = ee.Number(imageDate.difference(targetDate, 'day')).abs(); // Selisih waktu
    return image.set('date_diff', diff);
  }).sort('date_diff').first(); // Citra dengan selisih waktu terkecil
}

// Fungsi untuk masking cloud Sentinel-2 dengan mempertahankan properti awal
function maskS2clouds(image) {
  var qa = image.select("QA60");

  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  var maskedImage = image.updateMask(mask).divide(10000);
  return maskedImage.copyProperties(image, image.propertyNames());
}

// Tentukan tanggal tetap untuk citra (20 Juni 2024)
var targetDate = ee.Date('2024-06-20');

// Koleksi Sentinel-2 pada tanggal 20 Juni 2024
var sentinel2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(targetDate, targetDate.advance(5, 'day')) // Citra untuk satu hari
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10)) // Filter untuk awan rendah
  .map(maskS2clouds)
  .sort('system:time_start'); // Urutkan berdasarkan waktu citra

// Koleksi Sentinel-1 pada tanggal 20 Juni 2024
var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(targetDate, targetDate.advance(5, 'day')); // Citra untuk satu hari

// Ambil citra pertama dalam koleksi setelah filter
var image_sen2 = getClosestImage(sentinel2, targetDate);
var image_sen1 = getClosestImage(sentinel1, targetDate);

// Tambahkan layer untuk citra Sentinel-2 dan Sentinel-1
Map.addLayer(image_sen2.clip(roi), {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'Sentinel-2 (RGB) 20 Juni 2024');
Map.addLayer(image_sen1.clip(roi), {bands: ['VV'], min: -30, max: 5}, 'Sentinel-1 VV 20 Juni 2024');
Map.addLayer(image_sen1.clip(roi), {bands: ['VH'], min: -30, max: 5}, 'Sentinel-1 VH 20 Juni 2024');

// Cetak hasil ke konsol
print("Sentinel-2 (RGB) 20 Juni 2024:", image_sen2);
print("Sentinel-1 VV 20 Juni 2024:", image_sen1);

