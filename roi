// Definisikan koordinat untuk poligon (ROI)
var roi = ee.Geometry.Polygon([
  [
    [110.40784521277556, -7.3167508403317845],
    [110.46243353064665, -7.3167508403317845],
    [110.46243353064665, -7.261411753752696],
    [110.40784521277556, -7.261411753752696],
    [110.40784521277556, -7.3167508403317845] // Tutup poligon dengan titik awal
  ]
]);

// Fungsi untuk mendapatkan citra dengan tanggal paling dekat
function getClosestImage(collection, targetDate) {
  return collection.map(function(image) {
    var imageDate = ee.Date(image.get('system:time_start')); // Gunakan system:time_start
    var diff = ee.Number(imageDate.difference(targetDate, 'day')).abs(); // Selisih waktu
    return image.set('date_diff', diff);
  }).sort('date_diff').first(); // Citra dengan selisih waktu terkecil
}

// Fungsi untuk masking cloud Sentinel-2 dengan mempertahankan properti awal
function maskS2clouds(image) {
  var qa = image.select("QA60");

  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  var maskedImage = image.updateMask(mask).divide(10000);
  return maskedImage.copyProperties(image, image.propertyNames());
}

// Definisi ROI dan waktu untuk musim
var startDateHujan = '2023-11-01';
var endDateHujan = '2024-03-31';
var startDateKemarau = '2024-03-01';
var endDateKemarau = '2024-11-30';


// Koleksi Sentinel-2 untuk musim kemarau dan musim hujan
var sentinel2Kemarau = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))
  .map(maskS2clouds)
  .sort('CLOUDY_PIXEL_PERCENTAGE'); // Urutkan berdasarkan tutupan awan terendah

var sentinel2Hujan = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(startDateHujan, endDateHujan)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 50))
  .map(maskS2clouds)
  .sort('CLOUDY_PIXEL_PERCENTAGE'); // Urutkan berdasarkan tutupan awan terendah

// Koleksi Sentinel-1 untuk musim kemarau dan musim hujan
var sentinel1Kemarau = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau);

var sentinel1Hujan = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(startDateHujan, endDateHujan);

// Ambil citra Sentinel-2 pertama sebagai referensi tanggal untuk masing-masing musim
var targetDateKemarau = ee.Date(ee.Image(sentinel2Kemarau.toList(sentinel2Kemarau.size()).get(0)).get('system:time_start'));
var targetDateHujan = ee.Date(ee.Image(sentinel2Hujan.toList(sentinel2Hujan.size()).get(0)).get('system:time_start'));

// Ambil citra terdekat untuk setiap musim
var image_sen2Kemarau = getClosestImage(sentinel2Kemarau, targetDateKemarau);
var image_sen1Kemarau = getClosestImage(sentinel1Kemarau, targetDateKemarau);

var image_sen2Hujan = getClosestImage(sentinel2Hujan, targetDateHujan);
var image_sen1Hujan = getClosestImage(sentinel1Hujan, targetDateHujan);

// Tambahkan layer untuk setiap musim
Map.addLayer(image_sen2Kemarau.clip(roi), {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'Sentinel-2 Kemarau');
Map.addLayer(image_sen1Kemarau.clip(roi), {bands: ['VV'], min: -30, max: 5}, 'Sentinel-1 VV Kemarau');
Map.addLayer(image_sen1Kemarau.clip(roi), {bands: ['VH'], min: -30, max: 5}, 'Sentinel-1 VH Kemarau');

Map.addLayer(image_sen2Hujan.clip(roi), {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'Sentinel-2 Hujan');
Map.addLayer(image_sen1Hujan.clip(roi), {bands: ['VV'], min: -30, max: 5}, 'Sentinel-1 VV Hujan');
Map.addLayer(image_sen1Hujan.clip(roi), {bands: ['VH'], min: -30, max: 5}, 'Sentinel-1 VH Hujan');

// Cetak hasil ke konsol
print("Sentinel-2 Kemarau:", image_sen2Kemarau);
print("Sentinel-1 Kemarau:", image_sen1Kemarau);
print("Sentinel-2 Hujan:", image_sen2Hujan);
print("Sentinel-1 Hujan:", image_sen1Hujan);
