/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var waduk_jatiluhur = ee.FeatureCollection("users/222111840/waduk_jatiluhur"),
    bengawan_solo = 
    /* color: #98ff00 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[111.72128829132018, -7.119456693309461],
                  [111.72496827805328, -7.132167987886488],
                  [111.72096374885493, -7.1328120591393365],
                  [111.72133656749683, -7.136522110152037],
                  [111.72735276940521, -7.1352073647412455],
                  [111.7294636684529, -7.132359615458543],
                  [111.72956557183707, -7.12860156890269],
                  [111.72692093364455, -7.1177746117711225],
                  [111.72889503947951, -7.115134357791344],
                  [111.73327240459182, -7.112664429028993],
                  [111.74305710307814, -7.115389866904822],
                  [111.75438675395705, -7.124247428204681],
                  [111.75936493860807, -7.124332600489215],
                  [111.76357064208794, -7.123736418089196],
                  [111.76245483822768, -7.121309120322852],
                  [111.7567900132344, -7.120840694100849],
                  [111.74970898143508, -7.11347354508707],
                  [111.74039635173537, -7.109726048197046],
                  [111.7270925950215, -7.10891692553676],
                  [111.72301563731887, -7.114282659719202]]]),
            {
              "system:index": "0"
            })]),
    danau_toba = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[99.16599761867788, 2.3369583020128792],
                  [99.17973052883413, 2.446725851586419],
                  [99.08909332180288, 2.433005391008793],
                  [99.05888091945913, 2.5427651007261938],
                  [98.96000396633413, 2.6141039303633424],
                  [98.95451080227163, 2.712874053457923],
                  [98.67710601711538, 2.9076467624478757],
                  [98.58921539211538, 2.910389805182578],
                  [98.50090303462544, 2.904963883123351],
                  [98.49540987056294, 2.847358318962676],
                  [98.52287569087544, 2.76231628558809],
                  [98.61076631587544, 2.6525756566544105],
                  [98.65196504634419, 2.586726578946354],
                  [98.63548555415669, 2.5455691635645077],
                  [98.71513643306294, 2.504410433758404],
                  [98.79204072993794, 2.3973917368836615],
                  [98.80577364009419, 2.312319604664925],
                  [98.87169160884419, 2.2931090557300107]]]),
            {
              "system:index": "0"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Parameter umum
var roi = danau_toba; // Ganti ROI dengan wilayah yang Anda pilih
var maxDifferenceDays = 7; // Maksimal perbedaan hari antar citra
var range = 720; // Rentang pencarian hari untuk Sentinel
var cloudThreshold = 5; // Persentase maksimum piksel berawan

// Koleksi Sentinel-2
var sentinel2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterBounds(roi)
  .filterDate(ee.Date(Date.now()).advance(-range, 'day'), ee.Date(Date.now()))
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', cloudThreshold))
  .sort('system:time_start');

// Koleksi Sentinel-1
var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(ee.Date(Date.now()).advance(-range, 'day'), ee.Date(Date.now()))
  .sort('system:time_start');

function getBestDatesAndImages(sentinel1, sentinel2, roi, maxDifferenceDays) {
    var sentinel1List = sentinel1.toList(sentinel1.size());
    var sentinel2List = sentinel2.toList(sentinel2.size());

    var bestDifference = maxDifferenceDays + 1; // Inisialisasi dengan nilai yang lebih besar
    var bestDates = null;
    for (var i = 0; i < sentinel1.size(); i++) {
        var s1 = ee.Image(sentinel1List.get(i));
        var s1Date = ee.Date(s1.get('system:time_start')); // Mendapatkan system:time_start dalam milidetik
        
        for (var j = 0; j < sentinel2.size(); j++) {
            var s2 = ee.Image(sentinel2List.get(j));
            var s2Date = ee.Date(s2.get('system:time_start')); // Mendapatkan system:time_start dalam milidetik
            var difference = s1Date.difference(s2Date, 'days').abs(); // Perbedaan dalam hari
            
            // Menambahkan log untuk melihat nilai perbedaan
            print('Perbedaan tanggal:', s1Date.format('YYYY-MM-dd'), 'dan', s2Date.format('YYYY-MM-dd'), 'adalah', difference, 'hari');

            if (difference < bestDifference) {
                bestDifference = difference;
                bestDates = { sentinel1: s1Date, sentinel2: s2Date };
            }
        }
    }

    // Jika tidak ada pasangan citra yang memenuhi kriteria
    if (bestDates === null) {
        print('Tidak ditemukan pasangan citra dengan perbedaan tanggal lebih kecil dari', maxDifferenceDays, 'hari.');
    }

    // Ambil citra Sentinel-1 dan Sentinel-2 yang sesuai
    var bestSentinel1 = sentinel1.filter(ee.Filter.eq('system:time_start', bestDates ? bestDates.sentinel1.millis() : 0));
    var bestSentinel2 = sentinel2.filter(ee.Filter.eq('system:time_start', bestDates ? bestDates.sentinel2.millis() : 0));

    var s1Coverage = bestSentinel1.mosaic().clip(roi);
    var s2Coverage = bestSentinel2.mosaic().clip(roi);

    return { sentinel1Image: s1Coverage, sentinel2Image: s2Coverage, dates: bestDates };
}

// Pemanggilan fungsi
var bestResult = getBestDatesAndImages(sentinel1, sentinel2, roi, maxDifferenceDays);
print('Tanggal terbaik:', bestResult.dates);
print('Citra Sentinel-1:', bestResult.sentinel1Image);
print('Citra Sentinel-2:', bestResult.sentinel2Image);

// Pemanggilan fungsi
var bestResult = getBestDatesAndImages(sentinel1, sentinel2, roi, maxDifferenceDays);

print('Tanggal terbaik:', bestResult.dates);
print('Citra Sentinel-1:', bestResult.sentinel1Image);
print('Citra Sentinel-2:', bestResult.sentinel2Image);

// VIs
var ndvi = combinedImage 
  .expression('(NIR - RED) / (NIR + RED)', {
    RED: combinedImage .select('B4'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDVI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var gndvi = combinedImage 
  .expression('(NIR - GREEN) / (NIR + GREEN)', {
    GREEN: combinedImage .select('B3'),
    NIR: combinedImage .select('B8'),
  })
  .rename('GNDVI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var evi = combinedImage 
  .expression('2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
    RED: combinedImage .select('B4'),
    NIR: combinedImage .select('B8'),
    BLUE: combinedImage .select('B2'),
  })
  .rename('EVI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var savi = combinedImage 
  .expression('((NIR - RED) * (1 + L)) / (NIR + RED + L)', {
    RED: combinedImage .select('B4'),
    NIR: combinedImage .select('B8'),
    L: 0.5,
  })
  .rename('SAVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var wavi = combinedImage 
  .expression('((NIR - BLUE) * (1 + L)) / (NIR + BLUE + L)', {
    NIR: combinedImage .select('B8'),
    BLUE: combinedImage .select('B2'),
    L: 0.5,
  })
  .rename('WAVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var rendvi = combinedImage 
  .expression('(NIR - RE) / (NIR + RE)', {
    NIR: combinedImage .select('B8'),
    RE: combinedImage .select('B5'),
  })
  .rename('RENDVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var ndii = combinedImage    // 819/1600
  .expression('(NIR - SWIR1) / (NIR + SWIR1)', {
    SWIR1: combinedImage .select('B11'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDII')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var ndavi = combinedImage 
  .expression('(NIR - BLUE) / (NIR + BLUE)', {
    NIR: combinedImage .select('B8'),
    BLUE: combinedImage .select('B2'),
  })
  .rename('NDAVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var lswi = combinedImage 
  .expression('(NIR - SWIR1) / (NIR + SWIR1)', {
    NIR: combinedImage .select('B8'),
    SWIR1: combinedImage .select('B11'),
  })
  .rename('LSWI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var fai = combinedImage     // fai https://custom-scripts.sentinel-hub.com/custom-scripts/sentinel-2/apa_script/
  .expression('NIR - (RED + (SWIR1 - RED) * ((832.8 - 664.6) / (1613.7 - 664.6)))', {
    RED: combinedImage .select('B4'), // Red
    NIR: combinedImage .select('B8'), // NIR
    SWIR1: combinedImage .select('B11'), // SWIR
  })
  .rename('FAI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
// var fdi = combinedImage     // https://docs.digitalearthafrica.org/en/latest/sandbox/notebooks/Real_world_examples/Floating_marine_debris.html
//   .expression(
//     'NIR - (RE2 + (SWIR1 - RE2) * ((842 * 1e-9 - 665 * 1e-9) / (1610 * 1e-9 - 665 * 1e-9))) * 10',
//     {
//       NIR: combinedImage .select('B8'), // NIR band
//       RE2: combinedImage .select('B6'), // Red Edge 2 band
//       SWIR1: combinedImage .select('B11'), // SWIR1 band (Band 11 for SWIR)
//     }
//   )
//   .rename('FDI')
//   .copyProperties(combinedImage , combinedImage .propertyNames())

// WIs
var ndwi = combinedImage 
  .expression('(GREEN - NIR) / (GREEN + NIR)', {
    GREEN: combinedImage .select('B3'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDWI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var mndwi = combinedImage 
  .expression('(GREEN - SWIR1) / (GREEN + SWIR1)', {
    GREEN: combinedImage .select('B3'),
    SWIR1: combinedImage .select('B11'),
  })
  .rename('MNDWI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
  
// Built-Up Indices
var ndbi = combinedImage 
  .expression('(SWIR2 - NIR) / (SWIR2 + NIR)', {
    SWIR2: combinedImage .select('B12'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDBI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var nbai = combinedImage 
  .expression('((SWIR2 - SWIR1) / GREEN) / ((SWIR2 + SWIR1) / GREEN)', {
    SWIR2: combinedImage .select('B12'),
    SWIR1: combinedImage .select('B11'),
    GREEN: combinedImage .select('B3'),
  })
  .rename('NBAI')
  .copyProperties(combinedImage , combinedImage .propertyNames()); 
var nbi = combinedImage 
  .expression('(RED * SWIR2) / (NIR)', {
    SWIR2: combinedImage .select('B12'),
    NIR: combinedImage .select('B8'),
    RED: combinedImage .select('B4'),
  })
  .rename('NBI')
  .copyProperties(combinedImage , combinedImage .propertyNames()); 
// Soil indices
var bsi = combinedImage 
  .expression(
    '((SWIR1 + RED) - (NIR + BLUE)) / ((SWIR1 + RED) + (NIR + BLUE))',
    {
      RED: combinedImage .select('B4'),
      SWIR1: combinedImage .select('B11'),
      NIR: combinedImage .select('B8'),
      BLUE: combinedImage .select('B2'),
    }
  )
  .rename('BSI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var ndbsi = combinedImage .expression(
  '(k < 0) ? -((SWIR1 - Blue) / (SWIR1 + Blue)) : ((SWIR1 - Blue) / (SWIR1 + Blue))', {
    'SWIR1': combinedImage .select('B11'),
    'Blue': combinedImage .select('B2'),
    'k': combinedImage .expression(
      '(1 - ((SWIR1 - NIR) / (3 * abs(NIR - Red)))) * (Red - Green)', {
        'SWIR1': combinedImage .select('B11'),
        'NIR': combinedImage .select('B8'),
        'Red': combinedImage .select('B4'),
        'Green': combinedImage .select('B3')
      })
  }
).rename('NDBSI')
.copyProperties(combinedImage , combinedImage .propertyNames());

// radar
var vv_vh_ratio = combinedImage 
  .expression('VV / VH', {
    VV: combinedImage .select('VV'),
    VH: combinedImage .select('VH'),
  })
  .rename('VV_VH_ratio')
  .copyProperties(combinedImage , combinedImage .propertyNames())

combinedImage  = combinedImage.addBands([
  ndvi,
  gndvi,
  evi,
  savi,
  wavi,
  rendvi,
  ndii,
  ndavi,
  ndwi,
  mndwi,
  lswi,
  fai,
  ndbi,
  nbai,
  nbi,
  bsi,
  ndbsi,
  vv_vh_ratio
]);    // Merge all indices into a Sentinel-2 image

// Visualisasi di Map
Map.centerObject(roi, 12);
Map.addLayer(combinedImage, {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'Natural Color');

// Ekspor ke Google Drive
Export.image.toDrive({
  image: combinedImage,
  description: 'roi_image_drive',
  folder: 'GEE_Exports',
  fileNamePrefix: 'roi_combined_image',
  region: roi,
  scale: 10,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true}
});

// Ekspor ke Aset
Export.image.toAsset({
  image: combinedImage,
  description: 'roi_image_asset',
  assetId: 'projects/ee-222111840/assets/roi_combined_image',
  region: roi,
  scale: 10
});