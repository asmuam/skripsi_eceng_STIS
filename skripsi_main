/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = 
    /* color: #ff9797 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[110.40784518497604, -7.261173849220073],
          [110.40784518497604, -7.313959002794661],
          [110.45934359806198, -7.313959002794661],
          [110.45934359806198, -7.261173849220073]]], null, false),
    bbws = ee.Image("projects/ee-222111840/assets/rawa_pening_bbws"),
    dji0095s = /* color: #ff00ff */ee.Feature(
        ee.Geometry.Point([110.447865194444, -7.26668133333333]),
        {
          "system:index": "0"
        }),
    dji0121u = /* color: #ff9999 */ee.Feature(
        ee.Geometry.Point([110.42236875, -7.30435008333333]),
        {
          "system:index": "0"
        }),
    dji0122u = /* color: #99ff99 */ee.Feature(
        ee.Geometry.Point([110.42288325, -7.30369816666667]),
        {
          "system:index": "0"
        }),
    dji0120u = /* color: #9999ff */ee.Feature(
        ee.Geometry.Point([110.422376305556, -7.30434944444444]),
        {
          "system:index": "0"
        }),
    dji0119vertical = /* color: #ffff99 */ee.Feature(
        ee.Geometry.Point([110.423018694444, -7.30536213888889]),
        {
          "system:index": "0"
        }),
    dji0117u = /* color: #99ffff */ee.Feature(
        ee.Geometry.Point([110.4230205, -7.30536827777778]),
        {
          "system:index": "0"
        }),
    dji0114u = /* color: #ff99ff */ee.Feature(
        ee.Geometry.Point([110.447676388889, -7.27494127777778]),
        {
          "system:index": "0"
        }),
    dji0113u = /* color: #d63000 */ee.Feature(
        ee.Geometry.Point([110.44744425, -7.2780285]),
        {
          "system:index": "0"
        }),
    dji0112b = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Point([110.447443305556, -7.27802783333333]),
        {
          "system:index": "0"
        }),
    dji0110 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Point([110.444154055556, -7.27244091666667]),
        {
          "system:index": "0"
        }),
    dji0109 = /* color: #ffc82d */ee.Feature(
        ee.Geometry.Point([110.444274138889, -7.27224408333333]),
        {
          "system:index": "0"
        }),
    dji0108 = /* color: #00ffff */ee.Feature(
        ee.Geometry.Point([110.444194694444, -7.27237541666667]),
        {
          "system:index": "0"
        }),
    dji0107 = /* color: #bf04c2 */ee.Feature(
        ee.Geometry.Point([110.4443155, -7.27217716666667]),
        {
          "system:index": "0"
        }),
    dji0104b = /* color: #ff0000 */ee.Feature(
        ee.Geometry.Point([110.445214694444, -7.27086080555556]),
        {
          "system:index": "0"
        }),
    dji0103u = /* color: #00ff00 */ee.Feature(
        ee.Geometry.Point([110.445219527778, -7.27086544444444]),
        {
          "system:index": "0"
        }),
    dji0102s = /* color: #0000ff */ee.Feature(
        ee.Geometry.Point([110.445221722222, -7.27086591666667]),
        {
          "system:index": "0"
        }),
    dji0101t = /* color: #999900 */ee.Feature(
        ee.Geometry.Point([110.4452205, -7.27086597222222]),
        {
          "system:index": "0"
        }),
    dji0100u = /* color: #009999 */ee.Feature(
        ee.Geometry.Point([110.445177305556, -7.27091152777778]),
        {
          "system:index": "0"
        }),
    dji0099b = /* color: #ff00ff */ee.Feature(
        ee.Geometry.Point([110.445177916667, -7.27091080555556]),
        {
          "system:index": "0"
        }),
    dji0098b = /* color: #ff9999 */ee.Feature(
        ee.Geometry.Point([110.445179055556, -7.27091097222222]),
        {
          "system:index": "0"
        }),
    dji0097s = /* color: #99ff99 */ee.Feature(
        ee.Geometry.Point([110.445178666667, -7.27091072222222]),
        {
          "system:index": "0"
        }),
    dji0096s = /* color: #9999ff */ee.Feature(
        ee.Geometry.Point([110.445178916667, -7.27091152777778]),
        {
          "system:index": "0"
        }),
    dji0118u = /* color: #ffff99 */ee.Feature(
        ee.Geometry.LineString(
            [[110.42302, -7.30537],
             [110.42302, -7.30536]]),
        {
          "system:index": "0"
        }),
    dji0116rotate = /* color: #99ffff */ee.Feature(
        ee.Geometry.LineString(
            [[110.44773, -7.26692],
             [110.44733, -7.26775]]),
        {
          "system:index": "0"
        }),
    dji0115u = /* color: #ff99ff */ee.Feature(
        ee.Geometry.LineString(
            [[110.44744, -7.2718],
             [110.44723, -7.26878]]),
        {
          "system:index": "0"
        }),
    dji0111 = /* color: #d63000 */ee.Feature(
        ee.Geometry.LineString(
            [[110.44416, -7.27244],
             [110.44416, -7.27244]]),
        {
          "system:index": "0"
        }),
    dji0106 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.LineString(
            [[110.44461, -7.27209],
             [110.44461, -7.27209]]),
        {
          "system:index": "0"
        }),
    dji0105s = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.LineString(
            [[110.44778, -7.26694],
             [110.44579, -7.27079]]),
        {
          "system:index": "0"
        }),
    rawa_pening_shp = ee.FeatureCollection("projects/ee-222111840/assets/rawa_pening_shp"),
    rawa_pening_sbwp = ee.FeatureCollection("projects/ee-222111840/assets/rawa_pening_sbwp"),
    eceng = /* color: #2fd640 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Point([110.44935077438517, -7.265844294519221]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Point([110.44953645813294, -7.266672977212641]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Point([110.4496465713244, -7.267324288879652]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Point([110.44925401011417, -7.267266292432319]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Point([110.44860867319119, -7.268398763768498]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Point([110.44800602848225, -7.267853329001362]),
            {
              "system:index": "5"
            })]),
    air = 
    /* color: #3eceff */
    /* shown: false */
    ee.FeatureCollection([]),
    kja = 
    /* color: #fffd02 */
    /* shown: false */
    ee.FeatureCollection([]),
    vegetasi_lain = 
    /* color: #0a7400 */
    /* shown: false */
    ee.FeatureCollection([]),
    tanah = 
    /* color: #c76029 */
    /* shown: false */
    ee.FeatureCollection([]),
    lainnya = 
    /* color: #000000 */
    /* shown: false */
    ee.FeatureCollection([]),
    geometry = /* color: #d63000 */ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Fungsi untuk mendapatkan citra dengan tanggal paling dekat atau sesuai targetDate
function getClosestImage(collection, targetDate) {
  return collection
    .map(function (image) {
      var imageDate = ee.Date(image.get('system:time_start')) // Gunakan system:time_start
      var diff = ee.Number(imageDate.difference(targetDate, 'day')).abs() // Selisih waktu
      return image.set('date_diff', diff)
    })
    .sort('date_diff')
    .first() // Citra dengan selisih waktu terkecil
}
// Fungsi untuk masking cloud Sentinel-2 dengan mempertahankan properti awal
function maskS2clouds(image) {
  var qa = image.select('QA60')
  var cloudBitMask = 1 << 10
  var cirrusBitMask = 1 << 11
  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0))
  var maskedImage = image.updateMask(mask).divide(10000)
  return maskedImage.copyProperties(image, image.propertyNames())
}
// Fungsi untuk mencocokkan citra berdasarkan tanggal
function findMatchingDates(s1Collection, s2Collection) {
  // Ambil daftar tanggal dari Sentinel-1 dan Sentinel-2
  var s1Dates = s1Collection.aggregate_array('system:time_start');
  var s2Dates = s2Collection.aggregate_array('system:time_start');
  // Ubah ke format tanggal untuk pencocokan
  s1Dates = s1Dates.map(function(date) { return ee.Date(date).format('YYYY-MM-dd'); });
  s2Dates = s2Dates.map(function(date) { return ee.Date(date).format('YYYY-MM-dd'); });
  // Temukan irisan antara dua koleksi berdasarkan tanggal
  var commonDates = s1Dates.filter(ee.Filter.inList('item', s2Dates));
    // Urutkan tanggal berdasarkan yang terbaru
  commonDates = commonDates.sort();
  return commonDates;
}
// Tentukan tanggal tetap untuk citra ()
// Drone = 7/23/2024
var targetDate = ee.Date('2024-7-15')
var range = 16
// Koleksi Sentinel-2 pada tanggal 20 Juni 2024
var sentinel2 = ee
  .ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterBounds(roi)
  .filterDate(targetDate.advance(-range, 'day'), targetDate.advance(range, 'day')) // Citra untuk satu hari
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10)) // Filter untuk awan rendah
  .map(maskS2clouds)
  .sort('system:time_start') // Urutkan berdasarkan waktu citra
// Koleksi Sentinel-1 pada tanggal 20 Juni 2024
var sentinel1 = ee
  .ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(targetDate.advance(-range, 'day'), targetDate.advance(range, 'day')) // Citra untuk satu hari
// Contoh penggunaan fungsi dengan koleksi S1 dan S2
// var matchingDates = findMatchingDates(sentinel1, sentinel2);
// // Ambil citra pertama dalam koleksi setelah filter
// var image_sen2 = getClosestImage(sentinel2, targetDate)
// var image_sen1 = getClosestImage(sentinel1, targetDate)
var sentinel2List = sentinel2.toList(sentinel2.size()); 
var sentinel1List = sentinel1.toList(sentinel1.size());
var image_sen2 = ee.Image(sentinel2List.get(5)); // 7/26/2024
var image_sen1 = ee.Image(sentinel1List.get(4)); // 7/25/2024
// Indeks Vegetasi
var ndvi = image_sen2
  .expression('(NIR - RED) / (NIR + RED)', {
    RED: image_sen2.select('B4'),
    NIR: image_sen2.select('B8'),
  })
  .rename('NDVI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var gndvi = image_sen2
  .expression('(NIR - GREEN) / (NIR + GREEN)', {
    GREEN: image_sen2.select('B3'),
    NIR: image_sen2.select('B8'),
  })
  .rename('GNDVI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var evi = image_sen2
  .expression('2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
    RED: image_sen2.select('B4'),
    NIR: image_sen2.select('B8'),
    BLUE: image_sen2.select('B2'),
  })
  .rename('EVI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var savi = image_sen2
  .expression('((NIR - RED) * (1 + L)) / (NIR + RED + L)', {
    RED: image_sen2.select('B4'),
    NIR: image_sen2.select('B8'),
    L: 0.5,
  })
  .rename('SAVI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var wavi = image_sen2
  .expression('((NIR - BLUE) * (1 + L)) / (NIR + BLUE + L)', {
    NIR: image_sen2.select('B8'),
    BLUE: image_sen2.select('B2'),
    L: 0.5,
  })
  .rename('WAVI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var rendvi = image_sen2
  .expression('(NIR - RE) / (NIR + RE)', {
    NIR: image_sen2.select('B8'),
    RE: image_sen2.select('B5'),
  })
  .rename('RENDVI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var gari = image_sen2
  .expression(
    '(NIR - (GREEN - (BLUE - RED))) / (NIR - (GREEN + (BLUE - RED)))',
    {
      GREEN: image_sen2.select('B3'),
      BLUE: image_sen2.select('B2'),
      NIR: image_sen2.select('B8'),
      RED: image_sen2.select('B4'),
    }
  )
  .rename('GARI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
// Indeks Air
var ndwi = image_sen2
  .expression('(GREEN - NIR) / (GREEN + NIR)', {
    GREEN: image_sen2.select('B3'),
    NIR: image_sen2.select('B8'),
  })
  .rename('NDWI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var mndwi = image_sen2
  .expression('(GREEN - SWIR1) / (GREEN + SWIR1)', {
    GREEN: image_sen2.select('B3'),
    SWIR1: image_sen2.select('B11'),
  })
  .rename('MNDWI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var lswi = image_sen2
  .expression('(NIR - SWIR1) / (NIR + SWIR1)', {
    NIR: image_sen2.select('B8'),
    SWIR1: image_sen2.select('B11'),
  })
  .rename('LSWI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var ndavi = image_sen2
  .expression('(NIR - BLUE) / (NIR + BLUE)', {
    NIR: image_sen2.select('B8'),
    BLUE: image_sen2.select('B2'),
  })
  .rename('NDAVI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
// https://custom-scripts.sentinel-hub.com/custom-scripts/sentinel-2/apa_script/
var fai = image_sen2
  .expression('B8 - (B4 + (B11 - B4) * ((832.8 - 664.6) / (1613.7 - 664.6)))', {
    B4: image_sen2.select('B4'), // Red
    B8: image_sen2.select('B8'), // NIR
    B11: image_sen2.select('B11'), // SWIR
  })
  .rename('FAI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
// Define the wavelength values (in meters)
var wavelength_nir = 842 * 1e-9 // NIR
var wavelength_red = 665 * 1e-9 // Red
var wavelength_swir1 = 1610 * 1e-9 // SWIR1
// Calculate the Floating Debris Index (FDI)
// https://docs.digitalearthafrica.org/en/latest/sandbox/notebooks/Real_world_examples/Floating_marine_debris.html
var fdi = image_sen2
  .expression(
    'NIR - (RE2 + (SWIR1 - RE2) * ((wavelength_nir - wavelength_red) / (wavelength_swir1 - wavelength_red))) * 10',
    {
      NIR: image_sen2.select('B8'), // NIR band
      RE2: image_sen2.select('B6'), // Red Edge 2 band
      SWIR1: image_sen2.select('B11'), // SWIR1 band (Band 11 for SWIR)
      wavelength_nir: wavelength_nir, // NIR wavelength
      wavelength_red: wavelength_red, // Red wavelength
      wavelength_swir1: wavelength_swir1, // SWIR1 wavelength
    }
  )
  .rename('FDI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
// Indeks Bangunan
var ndbi = image_sen2
  .expression('(SWIR2 - NIR) / (SWIR2 + NIR)', {
    SWIR2: image_sen2.select('B12'),
    NIR: image_sen2.select('B8'),
  })
  .rename('NDBI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
// Indeks Tanah
var bsi = image_sen2
  .expression(
    '((SWIR1 + RED) - (NIR + BLUE)) / ((SWIR1 + RED) + (NIR + BLUE))',
    {
      RED: image_sen2.select('B4'),
      SWIR1: image_sen2.select('B11'),
      NIR: image_sen2.select('B8'),
      BLUE: image_sen2.select('B2'),
    }
  )
  .rename('BSI')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var ndii = image_sen2
  .expression('(NIR - SWIR1) / (NIR + SWIR1)', {
    SWIR1: image_sen2.select('B11'),
    NIR: image_sen2.select('B8'),
  })
  .rename('NDII')
  .copyProperties(image_sen2, image_sen2.propertyNames())
var vv_vh_ratio = image_sen1
  .expression('VV / VH', {
    VV: image_sen1.select('VV'),
    VH: image_sen1.select('VH'),
  })
  .rename('VV/VH')
  .copyProperties(image_sen1, image_sen1.propertyNames())
// Membuat komposit dari semua indeks yang telah dihitung
image_sen2 = image_sen2.addBands([
  ndvi,
  gndvi,
  evi,
  savi,
  wavi,
  rendvi,
  gari,
  ndwi,
  mndwi,
  lswi,
  ndavi,
  fai,
  fdi,
  ndbi,
  bsi,
  ndii,
])
// Memilih band yang dibutuhkan dari citra Sentinel-2, termasuk band indeks komposit
image_sen2 = image_sen2
  .select([
    'B1',
    'B2',
    'B3',
    'B4',
    'B5',
    'B6',
    'B7',
    'B8',
    'B8A',
    'B9',
    'B11',
    'B12', // Band-band Sentinel-2
    'NDVI',
    'GNDVI',
    'EVI',
    'SAVI',
    'WAVI',
    'RENDVI',
    'GARI',
    'NDWI',
    'MNDWI',
    'LSWI',
    'NDAVI',
    'FAI',
    'FDI',
    'NDBI',
    'BSI',
    'NDII',
  ])
  .toFloat() // Mengubah tipe data menjadi float untuk pemrosesan lebih lanjut
image_sen1 = image_sen1.addBands([
  vv_vh_ratio
])
image_sen1 = image_sen1.select(['VV', 'VH','VV/VH']).toFloat()
// Membuat dataframe untuk training dengan variabel X dan Y
var sen2_bands = [
  'B1',
  'B2',
  'B3',
  'B4',
  'B5',
  'B6',
  'B7',
  'B8',
  'B8A',
  'B9',
  'B11',
  'B12',
  'NDVI',
  'GNDVI',
  'EVI',
  'SAVI',
  'WAVI',
  'RENDVI',
  'GARI',
  'NDWI',
  'MNDWI',
  'LSWI',
  'NDAVI',
  'FAI',
  'FDI',
  'NDBI',
  'BSI',
  'NDII',
]
var sen1_bands = ['VV', 'VH','VV/VH']
// Gabungkan citra Sentinel-1 dan Sentinel-2
var combinedImage = image_sen2.addBands(image_sen1);
// Gabungkan band-band dari Sentinel-2 dan Sentinel-1
var combinedBands = sen2_bands.concat(sen1_bands);
// Menggabungkan Kelas
// var classNames = eceng.merge(bukan_eceng);
// dengan buffer
// var classNames = eceng.merge(bukan_eceng).map(function(feat) { return feat.buffer(30); });
// Stratified sampling
// var classValues = classNames.aggregate_array('landcover').distinct();
// var stratifiedSample = ee.FeatureCollection(classValues.map(function(value) {
//   var features = classNames.filter(ee.Filter.eq('landcover', value)).randomColumn();
//   var train = features.filter(ee.Filter.lte('random', 0.8)).map(function(feat) { return feat.set('sample', 'train'); });
//   var test = features.filter(ee.Filter.gt('random', 0.8)).map(function(feat) { return feat.set('sample', 'test'); });
//   return train.merge(test);
// })).flatten();
// var training_sample = stratifiedSample.filter(ee.Filter.eq('sample', 'train')); // 80%
// var test_sample = stratifiedSample.filter(ee.Filter.eq('sample', 'test')); // 20%
// // Training data dari citra gabungan
// var sampled = combinedImage.select(combinedBands).sampleRegions({
//   collection: stratifiedSample,
//   properties: ['landcover', 'sample'], // Atribut target, seperti tipe tutupan lahan
//   scale: 10, // Skala pengambilan sampel
//   geometries: true, // Menyertakan geometri
// });
// Hitung jumlah piksel dalam area
var pixelCount = rawa_pening_shp.geometry().area().divide(100);
// Cetak hasil ke konsol
print('Jumlah Piksel:', pixelCount);
print(sentinel2.toList(sentinel2.size()));
print(sentinel1.toList(sentinel1.size()));
print('Sentinel-2 (RGB) 16 Ags 2023:', image_sen2)
print('Sentinel-1 VV 16 Ags 2023:', image_sen1)
// print(sampled)
// print(training_sample)
// print(test_sample)
print(combinedImage)
// Tampilkan tanggal yang sama
// print('Matching Dates:', matchingDates);
// Print the sizes of the training and testing samples per class 
// classValues.evaluate(function(values) { 
//   values.forEach(function(value) { 
//     var trainSize = training_sample.filter(ee.Filter.eq('landcover', value)).size(); 
//     var testSize = test_sample.filter(ee.Filter.eq('landcover', value)).size(); 
//     print('Class:', value, 'Train sample size:', trainSize); 
//     print('Class:', value, 'Test sample size:', testSize); }); 
  
// });
// Pusatkan peta ke koordinat tersebut
Map.centerObject(roi, 14)
Map.addLayer(rawa_pening_shp, {}, 'danau'); 
Map.addLayer(rawa_pening_sbwp, {}, 'shapefile');
Map.addLayer(combinedImage.clip(rawa_pening_shp), {bands: ['VV', 'VH','VV/VH'], min: -30, max: 0}, 'combinedImage S1')
Map.addLayer(combinedImage.clip(rawa_pening_shp), {bands: ['B4', 'B3', 'B2'], max: 0.3}, 'combinedImage S2'); 
Map.addLayer(combinedImage.clip(rawa_pening_shp), {bands: ['BSI','FAI','NDWI'], min: -1, max: 1}, 'helper'); 
// Ekspor data training gabungan ke drive dalam bentuk csv
// Export.table.toDrive({
//   collection: training_sample, // FeatureCollection yang ingin disimpan
//   description: 'csv_train_drive', // Nama deskripsi untuk ekspor
//   folder: 'GEE_Exports', // Folder di Google Drive  fileFormat: 'TFRecord'
//   fileFormat: 'csv',
//   fileNamePrefix: 'data_training',
// })
// // Ekspor data test gabungan ke drive dalam bentuk csv
// Export.table.toDrive({
//   collection: test_sample, // FeatureCollection yang ingin disimpan
//   description: 'csv_test_drive', // Nama deskripsi untuk ekspor
//   folder: 'GEE_Exports', // Folder di Google Drive  fileFormat: 'TFRecord'
//   fileFormat: 'csv',
//   fileNamePrefix: 'data_test',
// })
// // Ekspor data training gabungan ke GEE Asset dalam bentuk FeatureCollection
// Export.table.toAsset({
//   collection: training_sample, // FeatureCollection yang ingin disimpan
//   description: 'train_asset', // Nama deskripsi untuk ekspor
//   assetId: 'users/222111840/data_training', // ID asset untuk tabel di GEE
// })
// // Ekspor data test gabungan ke GEE Asset dalam bentuk FeatureCollection
// Export.table.toAsset({
//   collection: test_sample, // FeatureCollection yang ingin disimpan
//   description: 'test_asset', // Nama deskripsi untuk ekspor
//   assetId: 'users/222111840/data_test', // ID asset untuk tabel di GEE
// })
// // Ekspor Citra Gabungan Sentinel-1 dan Sentinel-2 (tfr) ke drive
// Export.image.toDrive({
//   image: combinedImage.clip(rawa_pening_shp), // Citra yang akan diekspor
//   description: 'rawa_pening_image_drive', // Nama deskripsi untuk ekspor
//   fileNamePrefix: 'rawa_pening_image',
//   folder: 'GEE_Exports', // Folder di Google Drive  fileFormat: 'TFRecord'
//   region: rawa_pening_shp, // Wilayah (ROI) tempat citra akan dipotong
//   scale: 10, // Skala dalam meter
//   fileFormat: 'GeoTIFF',
//   formatOptions: {
//     cloudOptimized: true
//   }
// })
// // Ekspor Citra Gabungan Sentinel-1 dan Sentinel-2 ke GEE Asset
// Export.image.toAsset({
//   image: combinedImage.clip(rawa_pening_shp), // Citra yang akan diekspor
//   description: 'rawa_pening_image_asset', // Nama deskripsi untuk ekspor
//   assetId: 'users/222111840/rawa_pening_image', // ID asset untuk tabel di GEE
//   region: rawa_pening_shp, // Wilayah (ROI) tempat citra akan dipotong
//   scale: 10, // Skala dalam meter
// })

// // [-1,1] ndvi 1 = vegetasi
// // [-1,1] gndvi 1 = vegetasi
// // [-1,1] evi 1 = vegetasi
// // [-1,1] savi 1 = vegetasi

// // Histogram untuk FAI
// var fai_histogram = ui.Chart.image.histogram({
//   image: combinedImage.select('FAI'), // Pilih band FAI
//   region: rawa_pening_shp,                            // Region of interest
//   scale: 10,                              // Resolusi analisis (30 m untuk Landsat/Sentinel)
//   maxPixels: 1e9                          // Jumlah maksimum piksel
// }).setOptions({
//   title: 'Histogram FAI',
//   hAxis: {title: 'Nilai FAI'},
//   vAxis: {title: 'Frekuensi'},
//   colors: ['green']
// });
// var fdi_histogram = ui.Chart.image.histogram({
//   image: combinedImage.select('FDI'), // Pilih band FAI
//   region: rawa_pening_shp,                            // Region of interest
//   scale: 10,                              // Resolusi analisis (30 m untuk Landsat/Sentinel)
//   maxPixels: 1e9                          // Jumlah maksimum piksel
// }).setOptions({
//   title: 'Histogram FDI',
//   hAxis: {title: 'Nilai FDI'},
//   vAxis: {title: 'Frekuensi'},
//   colors: ['green']
// });
// // Tampilkan histogram di konsol
// print(fai_histogram);
// print(fdi_histogram);
