/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = ee.FeatureCollection("projects/ee-222111840/assets/roi"),
    sbwp = ee.FeatureCollection("projects/ee-222111840/assets/rawa_pening_sbwp"),
    cnn1_ags = ee.Image("projects/ee-222111840/assets/cnn1_ags"),
    cnn1_jul = ee.Image("projects/ee-222111840/assets/cnn1_jul"),
    cnn1_jun = ee.Image("projects/ee-222111840/assets/cnn1_jun"),
    rawa_pening_image_ags = ee.Image("projects/ee-222111840/assets/rawa_pening_image_ags"),
    rawa_pening_image_jul = ee.Image("projects/ee-222111840/assets/rawa_pening_image_jul"),
    rawa_pening_image_jun = ee.Image("projects/ee-222111840/assets/rawa_pening_image_jun"),
    rf_ags = ee.Image("projects/ee-222111840/assets/rf_ags"),
    rf_jul = ee.Image("projects/ee-222111840/assets/rf_jul"),
    rf_jun = ee.Image("projects/ee-222111840/assets/rf_jun"),
    rawa_pening_shp = ee.FeatureCollection("projects/ee-222111840/assets/rawa_pening_shp"),
    breaksTable = ee.FeatureCollection("projects/ee-222111840/assets/jenks_breaks_interval");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// =======================================================================================
// KONFIGURASI & ASET (CONFIG & ASSETS)
// Bagian ini berisi semua data statis dan konfigurasi aplikasi.
// =======================================================================================

var CONFIG = {
  CLASS_NAMES: [
    'Eceng Gondok', 'Keramba Jaring Apung', 'Air',
    'Vegetasi Lain', 'Tanah', 'Lain-lain'
  ],
  PALETTE: [
    "#32CD32", "#BECD32", "#1E90FF", "#228B22", "#D2B48C", "#808080"
  ],
  BANDS: {
    ALL: ["B1","B2","B3","B4","B5","B6","B7","B8","B8A","B9","B11","B12","NDVI","GNDVI","EVI","SAVI","WAVI","RENDVI","NDAVI","FAI","NDWI","MNDWI","NDBI","NBI","NBAI","BSI","NDBSI","VV","VH"],
    OPTICAL: ["B1","B2","B3","B4","B5","B6","B7","B8","B8A","B9","B11","B12","NDVI","GNDVI","EVI","SAVI","WAVI","RENDVI","NDAVI","FAI","NDWI","MNDWI","NDBI","NBI","NBAI","BSI","NDBSI"],
    RADAR: ["VV","VH"]
  },
  BAND_COLORS: {
    "B1": "black", "B2": "black", "B3": "black", "B4": "black", "B5": "black", "B6": "black", "B7": "black", "B8": "black", "B8A": "black", "B9": "black", "B11": "black", "B12": "black",
    "NDVI": "green", "GNDVI": "green", "EVI": "green", "SAVI": "green", "WAVI": "green", "RENDVI": "green", "NDAVI": "green", "FAI": "green",
    "NDWI": "blue", "MNDWI": "blue",
    "BSI": "saddlebrown", "NDBSI": "saddlebrown",
    "NDBI": "purple", "NBI": "purple", "NBAI": "purple",
    "VV": "gray", "VH": "gray"
  },
  URLS: {
    ASSET: 'https://drive.google.com/drive/folders/17sTGS5TFTqMeb3zHZe9XvSxseOW18UmC?usp=drive_link',
    CODE: 'https://s.stis.ac.id/NotebookSkripsiEceng',
    PAPER: 'https://drive.google.com/file/d/1GqTc-PHtt3lH_wgvNOzRXVKS0DMYd0tG/view?usp=drive_link',
    AUTHOR: 'mailto:222111840@stis.ac.id'
  }
};

var DATA_LAYERS = {
  'optik_jun': { name: 'Citra RGB Sentinel-2 Juni', desc: 'Citra dasar RGB Sentinel-2 bulan Juni', img: rawa_pening_image_jun, vis: { bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3 } },
  'optik_jul': { name: 'Citra RGB Sentinel-2 Juli', desc: 'Citra dasar RGB Sentinel-2 bulan Juli', img: rawa_pening_image_jul, vis: { bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3 } },
  'optik_ags': { name: 'Citra RGB Sentinel-2 Agustus', desc: 'Citra dasar RGB Sentinel-2 bulan Agustus', img: rawa_pening_image_ags, vis: { bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3 } },
  'radar_jun': { name: 'Citra Radar Sentinel-1 Juni', desc: 'Citra radar Sentinel-1 bulan Juni (VV, VH)', img: rawa_pening_image_jun, vis: { bands: ['VV', 'VH', 'VV_VH_ratio'], min: -40, max: 0 } },
  'radar_jul': { name: 'Citra Radar Sentinel-1 Juli', desc: 'Citra radar Sentinel-1 bulan Juli (VV, VH)', img: rawa_pening_image_jul, vis: { bands: ['VV', 'VH', 'VV_VH_ratio'], min: -40, max: 0 } },
  'radar_ags': { name: 'Citra Radar Sentinel-1 Agustus', desc: 'Citra radar Sentinel-1 bulan Agustus (VV, VH)', img: rawa_pening_image_ags, vis: { bands: ['VV', 'VH', 'VV_VH_ratio'], min: -40, max: 0 } },
  'rf_jun': { name: 'Klasifikasi RF Juni', desc: 'Hasil klasifikasi Random Forest bulan Juni', img: rf_jun, vis: { min: 0, max: 5, palette: CONFIG.PALETTE } },
  'rf_jul': { name: 'Klasifikasi RF Juli', desc: 'Hasil klasifikasi Random Forest bulan Juli', img: rf_jul, vis: { min: 0, max: 5, palette: CONFIG.PALETTE } },
  'rf_ags': { name: 'Klasifikasi RF Agustus', desc: 'Hasil klasifikasi Random Forest bulan Agustus', img: rf_ags, vis: { min: 0, max: 5, palette: CONFIG.PALETTE } },
  'cnn1_jun': { name: 'Klasifikasi CNN1D Juni', desc: 'Hasil klasifikasi CNN1D bulan Juni', img: cnn1_jun, vis: { min: 0, max: 5, palette: CONFIG.PALETTE } },
  'cnn1_jul': { name: 'Klasifikasi CNN1D Juli', desc: 'Hasil klasifikasi CNN1D bulan Juli', img: cnn1_jul, vis: { min: 0, max: 5, palette: CONFIG.PALETTE } },
  'cnn1_ags': { name: 'Klasifikasi CNN1D Agustus', desc: 'Hasil klasifikasi CNN1D bulan Agustus', img: cnn1_ags, vis: { min: 0, max: 5, palette: CONFIG.PALETTE } }
};


// =======================================================================================
// STATUS APLIKASI (APPLICATION STATE)
// Satu tempat untuk semua variabel yang dapat berubah selama aplikasi berjalan.
// =======================================================================================

var app = {
  state: {
    currentLayerKey: 'none',
    lastInspectedPoint: null,
  },
  ui: {
    map: null,
    panels: {
      intro: null,
      legend: null,
      data: null,
    },
    dot: null,
    widgets: {
      title: null,
      status: null,
      coords: null,
      classificationPanel: null,
      classificationLabel: null,
      bandsPanel: null,
      bandLabels: {}
    }
  }
};


// =======================================================================================
// FUNGSI INTI / KONTROLER (CONTROLLERS)
// Bagian ini berisi semua fungsi yang menjalankan logika utama aplikasi.
// =======================================================================================

/**
 * Memperbarui layer yang ditampilkan di peta.
 * Fungsi ini menangani penambahan, penghapusan, dan pembaruan opasitas layer
 * serta memastikan titik inspeksi selalu di atas.
 * @param {string} newLayerKey - Kunci dari layer baru yang akan ditampilkan dari DATA_LAYERS.
 * @param {number} newOpacity - Nilai opasitas baru antara 0 dan 1.
 */
function updateMapLayer(newLayerKey, newOpacity) {
  // --- 1. HANYA OPASITAS YANG BERUBAH ---
  if (newLayerKey === app.state.currentLayerKey && newLayerKey !== 'none') {
    app.ui.map.layers().forEach(function(l) {
      if (l.getName() === app.state.currentLayerKey) l.setOpacity(newOpacity);
    });
    DATA_LAYERS[newLayerKey].vis.opacity = newOpacity;
    return;
  }

  // --- 2. PERBARUI PANEL LEGEND ---
  app.boot.populateLegendPanel();

  // --- 3. HAPUS LAYER LAMA ---
  if (app.state.currentLayerKey !== 'none') {
    app.ui.map.layers().forEach(function(l) {
      if (l.getName() === app.state.currentLayerKey) app.ui.map.remove(l);
    });
  }

  // --- 4. RESET JIKA LAYER BARU 'NONE' ---
  if (newLayerKey === 'none') {
    if (app.state.lastInspectedPoint) {
      inspectPoint(app.state.lastInspectedPoint.geom, app.state.lastInspectedPoint.coords);
    }
    app.state.currentLayerKey = 'none';
    return;
  }

  // --- 5. TAMBAHKAN LAYER BARU ---
  var info = DATA_LAYERS[newLayerKey];
  info.vis.opacity = newOpacity;
  var visImg = info.img.visualize(info.vis);
  app.ui.map.addLayer(visImg, {}, newLayerKey, true);
  
  // --- 6. PERBARUI STATUS & INSPEKSI ---
  app.state.currentLayerKey = newLayerKey;
  if (app.state.lastInspectedPoint) {
    inspectPoint(app.state.lastInspectedPoint.geom, app.state.lastInspectedPoint.coords);
  }
  
  // --- 7. PASTIKAN TITIK INSPEKSI DI ATAS ---
  if (app.ui.dot) {
    app.ui.map.remove(app.ui.dot);
    app.ui.map.add(app.ui.dot);
  }
}

/**
 * Memperbarui konten di dalam Panel Data berdasarkan hasil inspeksi.
 * @param {Object} data - Objek hasil dari reduceRegion.
 * @param {Object} coords - Koordinat titik yang diinspeksi.
 * @param {string} selectedLayerKey - Kunci dari layer yang sedang diinspeksi.
 */
function updateDataPanel(data, coords, selectedLayerKey) {
  app.ui.widgets.coords.setValue('Lat: ' + coords.lat.toFixed(5) + ' | Lon: ' + coords.lon.toFixed(5));
  app.ui.widgets.status.setValue('');

  var layerType = /optik/.test(selectedLayerKey) ? 'optical' : /radar/.test(selectedLayerKey) ? 'radar' : 'classification';

  if (data && data.classification !== null && data.classification !== undefined) {
    var classLabelText = /rf/.test(selectedLayerKey) ? 'Klasifikasi RF: ' : 'Klasifikasi CNN: ';
    app.ui.widgets.classificationLabel.setValue(classLabelText + data.classification + ' (' + CONFIG.CLASS_NAMES[data.classification] + ')');
    app.ui.widgets.classificationPanel.style().set('shown', true);
  } else {
    app.ui.widgets.classificationPanel.style().set('shown', false);
  }

  CONFIG.BANDS.ALL.forEach(function(bandName) {
    var label = app.ui.widgets.bandLabels[bandName];
    var showThisBand = (layerType === 'classification') ||
                       (layerType === 'optical' && CONFIG.BANDS.OPTICAL.indexOf(bandName) !== -1) ||
                       (layerType === 'radar' && CONFIG.BANDS.RADAR.indexOf(bandName) !== -1);

    if (showThisBand && data && data.hasOwnProperty(bandName)) {
      label.setValue(bandName + ': ' + (data[bandName] !== null ? data[bandName].toFixed(4) : 'No data'));
      label.style().set('shown', true);
    } else {
      label.style().set('shown', false);
    }
  });
}

/**
 * Menjalankan proses inspeksi pada sebuah titik di peta.
 * @param {ee.Geometry.Point} point - Objek geometri titik.
 * @param {Object} coords - Objek koordinat {lon, lat}.
 */
function inspectPoint(point, coords) {
  if (!app.ui.widgets.title) app.boot.populateDataPanel();
  
  app.ui.widgets.status.setValue('Memuat data piksel...');
  app.ui.widgets.coords.setValue('');

  var selectedLayerKey = app.state.currentLayerKey;
  if (selectedLayerKey === 'none') {
    app.ui.widgets.status.setValue('⚠️ Pilih layer terlebih dahulu untuk inspeksi.');
    app.ui.widgets.coords.setValue('Lat: ' + coords.lat.toFixed(5) + ' | Lon: ' + coords.lon.toFixed(5));
    app.ui.widgets.bandsPanel.style().set('shown', false);
    app.ui.widgets.classificationPanel.style().set('shown', false);
    return;
  }

  rawa_pening_shp.filterBounds(point).size().evaluate(function(size) {
    if (size === 0) {
      app.ui.widgets.status.setValue('⚠️ Objek berada di luar jangkauan penelitian.');
      app.ui.widgets.coords.setValue('Lat: ' + coords.lat.toFixed(5) + ' | Lon: ' + coords.lon.toFixed(5));
      app.ui.widgets.bandsPanel.style().set('shown', false);
      app.ui.widgets.classificationPanel.style().set('shown', false);
      return;
    }

    app.ui.widgets.bandsPanel.style().set('shown', true);

    var imageToInspect;
    if (/optik|radar/.test(selectedLayerKey)) {
      imageToInspect = DATA_LAYERS[selectedLayerKey].img;
    } else {
      var month = selectedLayerKey.split('_')[1];
      var baseImage = (month === 'jun') ? rawa_pening_image_jun : (month === 'jul') ? rawa_pening_image_jul : rawa_pening_image_ags;
      imageToInspect = baseImage.addBands(DATA_LAYERS[selectedLayerKey].img.rename('classification'));
    }
    
    var desiredBands = ee.List(CONFIG.BANDS.ALL).add('classification');
    var availableBands = imageToInspect.bandNames();
    var bandsToSelect = desiredBands.filter(ee.Filter.inList('item', availableBands));

    imageToInspect.select(bandsToSelect).reduceRegion({
      reducer: ee.Reducer.first(),
      geometry: point,
      scale: 10
    }).evaluate(function(result) {
      updateDataPanel(result, coords, selectedLayerKey);
    });
  });
}

/**
 * Menangani event klik pada peta.
 * @param {Object} coords - Objek koordinat yang dikembalikan oleh event klik.
 */
function handleMapClick(coords) {
  if (app.ui.dot) app.ui.map.remove(app.ui.dot);
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  app.ui.dot = ui.Map.Layer(point, { color: 'red' }, 'Titik Inspeksi');
  app.ui.map.add(app.ui.dot);

  app.state.lastInspectedPoint = { geom: point, coords: coords };
  inspectPoint(point, coords);
}


// =======================================================================================
// INISIALISASI APLIKASI (APP INITIALIZATION)
// Bagian ini membangun UI awal, mengatur event listener, dan memulai aplikasi.
// =======================================================================================

app.boot = {
  /**
   * Fungsi utama untuk menjalankan aplikasi.
   */
  run: function() {
    this.createAndArrangePanels();
    this.populateIntroPanel();
    this.populateLegendPanel();
    app.ui.map.onClick(handleMapClick);
    app.ui.map.style().set('cursor', 'crosshair');
    updateMapLayer('none', 0.75);
  },

  /**
   * Membuat dan mengatur panel-panel utama UI.
   */
  createAndArrangePanels: function() {
    app.ui.map = ui.Map();
    ui.root.clear();
    ui.root.add(app.ui.map);

    app.ui.panels.intro = ui.Panel({ style: { width: '30%', border: '5px solid darkgray', maxHeight: '90vh' } });
    app.ui.panels.legend = ui.Panel({ style: { position: 'bottom-left', width: '25%', padding: '8px' } });
    app.ui.panels.data = ui.Panel({ style: { position: 'bottom-right', width: '25%', padding: '8px', maxHeight: '40vh'} });

    ui.root.insert(0, app.ui.panels.intro);
    app.ui.map.add(app.ui.panels.legend);
    app.ui.map.add(app.ui.panels.data);
    
    app.ui.map.setOptions('SATELLITE');
    app.ui.map.setControlVisibility({ all: false, layerList: false, zoomControl: true, scaleControl: true, mapTypeControl: true, fullscreenControl: true });
    app.ui.map.centerObject(roi, 14);
  },

  /**
   * Mengisi konten untuk panel intro.
   */
  populateIntroPanel: function() {
    var intro = [
      ui.Label('Sebaran Eceng Gondok', { fontSize: '1.4vw', fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal' }),
      ui.Label('Danau Rawa Pening 2024', { fontSize: '1.4vw', fontWeight: 'bold', textAlign: 'center', stretch: 'horizontal' }),
      ui.Label('Aplikasi ini memvisualisasikan hasil klasifikasi area Danau Rawa Pening. ' +
               'Klasifikasi dilakukan menggunakan metode machine learning Random Forest (RF) dan deep learning CNN1D. ' +
               'Data citra satelit Sentinel-1 dan Sentinel-2 diambil melalui platform GEE dan diolah dengan platform Google Colab. ' +
               'Hasil klasifikasi mencakup enam kelas:', { fontSize: '0.9vw', fontWeight: 'normal' }),
      ui.Label('0. Eceng Gondok', { fontSize: '0.9vw', fontWeight: 'normal', margin: '0 0 0 8px' }),
      ui.Label('1. Keramba Jaring Apung', { fontSize: '0.9vw', fontWeight: 'normal', margin: '0 0 0 8px' }),
      ui.Label('2. Air', { fontSize: '0.9vw', fontWeight: 'normal', margin: '0 0 0 8px' }),
      ui.Label('3. Vegetasi lain', { fontSize: '0.9vw', fontWeight: 'normal', margin: '0 0 0 8px' }),
      ui.Label('4. Tanah', { fontSize: '0.9vw', fontWeight: 'normal', margin: '0 0 0 8px' }),
      ui.Label('5. Lain-lain', { fontSize: '0.9vw', fontWeight: 'normal', margin: '0 0 0 8px' }),
      ui.Label('Klik pada titik untuk melihat klasifikasi, nilai indeks spektral, dan detail lain dari piksel terpilih.', { fontSize: '0.9vw', fontWeight: 'normal' }),
      ui.Label('Peta batas wilayah penelitian bersumber dari Peta Sub-Batas Wilayah Perencanaan Danau Rawa Pening yang diterbitkan oleh Balai Besar Wilayah Sungai Pemali Juana.', { fontSize: '0.9vw', fontWeight: 'normal' }),
      ui.Label('Lapisan data (layer) dapat diganti melalui panel legenda.', { fontSize: '0.9vw', fontWeight: 'normal' }),
      ui.Label('Data Tambahan:', { color: 'black', fontWeight: 'bold', textAlign: 'left', margin: '12px 0 0 0' }),
      ui.Label('📁 Aset Balai Besar Wilayah Sungai Pemali Juana', { color: 'blue', fontWeight: 'bold' }, CONFIG.URLS.ASSET),
      ui.Label('💻 Kode Python untuk Pengolahan', { color: 'blue', fontWeight: 'bold', padding: '0 0 4px 0' }, CONFIG.URLS.CODE),
      ui.Label('📝 Paper', { color: 'blue', fontWeight: 'bold', padding: '0 0 4px 0' }, CONFIG.URLS.PAPER),
      ui.Label('Created by:', { color: 'black', fontWeight: 'bold', textAlign: 'center', margin: '12px 0 0 0' }),
      ui.Label('222111840@stis.ac.id', { color: 'blue', fontWeight: 'bold', textAlign: 'center' }, CONFIG.URLS.AUTHOR)
    ];
    intro.forEach(function(widget) { app.ui.panels.intro.add(widget); });
  },

  /**
   * Mengisi konten untuk panel legenda, termasuk semua kontrol.
   */
  populateLegendPanel: function() {
    app.ui.panels.legend.clear();
    app.ui.panels.legend.add(ui.Label('Panel Legenda', { fontWeight: 'bold', fontSize: '18px', margin: '8px 5px', textAlign: 'center', stretch: 'horizontal' }));

    var sbwpLayer = ui.Map.Layer(sbwp, {color: 'gray'}, 'Sub Batas Wilayah Perencanaan');
    var checkboxSbwp = ui.Checkbox({ label: 'Tampilkan Batas Wilayah', value: true, onChange: function(checked) { sbwpLayer.setShown(checked); } });
    app.ui.panels.legend.add(checkboxSbwp);

    var items = Object.keys(DATA_LAYERS).map(function(key) {
      return { label: DATA_LAYERS[key].name, value: key };
    });
    items.push({ label: 'Pilih Layer', value: 'none' });
    var select = ui.Select({ items: items, value: app.state.currentLayerKey, style: { margin: '8px 0px', stretch: 'horizontal' },
      onChange: function(layerKey) { updateMapLayer(layerKey, opacitySlider.getValue()); }
    });
    
    var opacityTextbox = ui.Textbox({ value: '0.75', placeholder: '0.0-1.0', style: { width: '70px', margin: '0 0 0 8px' }});
    var opacitySlider = ui.Slider({ min: 0, max: 1, value: 0.75, step: 0.01, style: { stretch: 'horizontal' }});
    
    opacitySlider.onChange(function(value) {
      opacityTextbox.setValue(value.toFixed(2), false);
      updateMapLayer(select.getValue(), value);
    });
    opacityTextbox.onChange(function(text) {
      var value = parseFloat(text);
      if (!isNaN(value) && value >= 0 && value <= 1) {
        opacitySlider.setValue(value, false);
        updateMapLayer(select.getValue(), value);
      }
    });
    
    var opacityControlPanel = ui.Panel([opacitySlider, opacityTextbox], ui.Panel.Layout.flow('horizontal'));

    app.ui.panels.legend.add(ui.Label('Pilih Layer Tampilan:', { fontSize: '14px', fontWeight: 'bold', textAlign: 'left', margin: '4px 0px' })).add(select);
    app.ui.panels.legend.add(ui.Label('Atur Opasitas:', { fontSize: '14px', fontWeight: 'bold', textAlign: 'left', margin: '4px 0px' })).add(opacityControlPanel);
    
    if (app.state.currentLayerKey !== 'none' && !/optik|radar/.test(app.state.currentLayerKey)) {
      legend.add(ui.Label(DATA_LAYERS[app.state.currentLayerKey].desc, { fontSize: '14px', fontWeight: 'bold', textAlign: 'left', margin: '4px 0px' }));
      CONFIG.CLASS_NAMES.forEach(function(label, index) {
        var colorBox = ui.Label({ style: { backgroundColor: CONFIG.PALETTE[index], padding: '8px', margin: '4px', border: '1px solid black', width: '20px', height: '20px' } });
        var textLabel = ui.Label(index + ': ' + label, { margin: '4px 0px', fontSize: '12px', padding: '0 4px' });
        app.ui.panels.legend.add(ui.Panel([colorBox, textLabel], ui.Panel.Layout.flow('horizontal'), { margin: '4px 0px' }));
      });
    } else if (app.state.currentLayerKey !== 'none') {
      app.ui.panels.legend.add(ui.Label(DATA_LAYERS[app.state.currentLayerKey].desc, { fontSize: '14px', fontWeight: 'bold', textAlign: 'left', margin: '4px 0px' }));
    }
  },
  
  /**
   * Mengisi layout awal untuk panel data.
   */
  populateDataPanel: function() {
    app.ui.panels.data.clear();
    app.ui.widgets.title = ui.Label('Panel Data', { fontWeight: 'bold', fontSize: '18px', margin: '8px 5px', textAlign: 'center', stretch: 'horizontal' });
    app.ui.widgets.status = ui.Label('', { stretch: 'horizontal', textAlign: 'center', color: 'gray', fontWeight: 'bold' });
    app.ui.widgets.coords = ui.Label('Klik pada peta untuk inspeksi', { margin: '0 0 8px 8px' });
    app.ui.widgets.classificationLabel = ui.Label('', { fontWeight: 'bold' });
    app.ui.widgets.classificationPanel = ui.Panel([app.ui.widgets.classificationLabel], null, { margin: '0 0 8px 8px', shown: false });
    app.ui.widgets.bandsPanel = ui.Panel([], ui.Panel.Layout.flow('vertical'), { margin: '0 8px', stretch: 'horizontal', shown: false });
    
    CONFIG.BANDS.ALL.forEach(function(bandName) {
      var color = CONFIG.BAND_COLORS[bandName] || "black";
      var bandLabel = ui.Label(bandName + ': -', { border: '1px solid ' + color, color: color, padding: '2px 6px', margin: '2px 0', borderRadius: '4px', shown: false });
      app.ui.widgets.bandLabels[bandName] = bandLabel;
      app.ui.widgets.bandsPanel.add(bandLabel);
    });

    app.ui.panels.data.add(app.ui.widgets.title);
    app.ui.panels.data.add(app.ui.widgets.status);
    app.ui.panels.data.add(app.ui.widgets.coords);
    app.ui.panels.data.add(app.ui.widgets.classificationPanel);
    app.ui.panels.data.add(app.ui.widgets.bandsPanel);
  }
};

// Jalankan aplikasi
app.boot.run();
