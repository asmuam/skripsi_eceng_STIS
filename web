/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = ee.FeatureCollection("projects/ee-222111840/assets/roi"),
    image = ee.Image("projects/ee-222111840/assets/rawa_pening_image");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Set the center and zoom level of the new map.
map.centerObject(roi, 12);

// Define base map style.
var basemapStyle = [{
        featureType: 'all',
        elementType: 'labels.text.fill',
        stylers: [{
                saturation: 36
            },
            {
                color: '#000000'
            },
            {
                lightness: 40
            },
        ],
    },
    {
        featureType: 'all',
        elementType: 'labels.text.stroke',
        stylers: [{
                visibility: 'on'
            },
            {
                color: '#000000'
            },
            {
                lightness: 16
            },
        ],
    },
    {
        featureType: 'all',
        elementType: 'labels.icon',
        stylers: [{
            visibility: 'off'
        },
        ],
    },
    {
        featureType: 'administrative',
        elementType: 'geometry.fill',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 20
            },
        ],
    },
    {
        featureType: 'administrative',
        elementType: 'geometry.stroke',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 17
            },
            {
                weight: 1.2
            },
        ],
    },
    {
        featureType: 'administrative',
        elementType: 'labels.text.fill',
        stylers: [{
            lightness: '38'
        },
        ],
    },
    {
        featureType: 'landscape',
        elementType: 'geometry',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 20
            },
        ],
    },
    {
        featureType: 'landscape',
        elementType: 'geometry.fill',
        stylers: [{
            lightness: '-32'
        },
        ],
    },
    {
        featureType: 'poi',
        elementType: 'geometry',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 21
            },
        ],
    },
    {
        featureType: 'poi',
        elementType: 'labels.text.fill',
        stylers: [{
            lightness: '36'
        },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'geometry.fill',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 17
            },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'geometry.stroke',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 29
            },
            {
                weight: 0.2
            },
        ],
    },
    {
        featureType: 'road.highway',
        elementType: 'labels.text.fill',
        stylers: [{
            color: '#bdbdbd'
        },
        ],
    },
    {
        featureType: 'road.arterial',
        elementType: 'geometry',
        stylers: [{
            lightness: 18
        },
        ],
    },
    {
        featureType: 'road.arterial',
        elementType: 'geometry.fill',
        stylers: [{
            lightness: '-62'
        },
        ],
    },
    {
        featureType: 'road.arterial',
        elementType: 'labels.text.fill',
        stylers: [{
                color: '#e5e5e5'
            },
            {
                visibility: 'off'
            },
        ],
    },
    {
        featureType: 'road.local',
        elementType: 'geometry',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 16
            },
        ],
    },
    {
        featureType: 'road.local',
        elementType: 'geometry.fill',
        stylers: [{
            lightness: '21'
        },
        ],
    },
    {
        featureType: 'road.local',
        elementType: 'labels.text.fill',
        stylers: [{
            color: '#a0a0a0'
        },
        ],
    },
    {
        featureType: 'transit',
        elementType: 'geometry',
        stylers: [{
                color: '#000000'
            },
            {
                lightness: 19
            },
        ],
    },
    {
        featureType: 'water',
        elementType: 'geometry',
        stylers: [{
                color: '#232222'
            },
            {
                lightness: 17
            },
        ],
    },
];

// Function to create the intro panel with labels.
function panelcreate() {
    // Create an intro panel with labels.
    var intro = ui.Panel([
        ui.Label({
            value: 'Sebaran Eceng Gondok Danau Rawa Pening 2024',
            style: {
                fontSize: '1.4vw',
                fontWeight: 'bold'
            },
        }),
        ui.Label({
            value: 'Aplikasi ini memvisualisasikan hasil klasifikasi area Danau Rawa Pening dan sekitarnya. ' +
           'Klasifikasi dilakukan menggunakan metode machine learning Random Forest (RF) dan deep learning CNN1D. ' +
           'Data citra satelit Sentinel 1 dan 2 digunakan untuk ekstraksi pita dan indeks spektral. ' +
           'Hasil klasifikasi mencakup enam kelas:',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: '0. Eceng Gondok',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: '1. Keramba Jaring Apung',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: '2. Air',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: '3. Vegetasi lain',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: '4. Tanah',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: '5. Lain-lain',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: 'Klik pada titik untuk melihat klasifikasi, nilai indeks spektral, dan detail lain dari piksel terpilih',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: 'Petas Batas Wilayah Penelitian diambil dari Peta Sub Batas Wilayah Perencanaan'+
            'Danau Rawa Pening dari Balai Besar Wilayah Sungai Pemali Juana.',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
        ui.Label({
            value: 'Lapisan data dapat diganti melalui panel legenda.',
            style: {
                fontSize: '0.9vw',
                fontWeight: 'normal'
            },
        }),
    ]);

    // Add intro panel to the main panel.
    panel.add(intro);
}

// Function to create reference panel.
function referencecreate() {
    var referenceZero = ui.Label({
        value: 'Data Tambahan:',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'left'
        },
    });
    var referenceOne = ui.Label({
        value: 'üìÅ Aset Balai Besar Wilayah Sungai Pemali Juana',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'left'
        },
        targetUrl: 'drive.google.com'
    });
    var referenceTwo = ui.Label({
        value: 'üíª Kode Python untuk Pengolahan',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'left',
            padding: '0px 0px 4px 0px'
        },
        targetUrl: 'https://colab.research.google.com/drive/1DCOyKQ2XWKaLIT7h8__X5uc6QrxCeyCb#scrollTo=OhQrbdyR-Y_k&uniqifier=2'
    });
    var referenceThree = ui.Label({
        value: 'Created by:',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'center'
        },
    });
    var author = ui.Label({
        value: '222111840@stis.ac.id',
        style: {
            color: 'black',
            fontWeight: 'bold',
            textAlign: 'center'
        },
        targetUrl: 'mailto:222111840@stis.ac.id'
    });

    // Add reference to the panel.
    panel.add(referenceZero);
    panel.add(referenceOne);
    panel.add(referenceTwo);
    panel.add(referenceThree);
    panel.add(author);
}

// Create an inspector panel with a horizontal layout.
var inspector = ui.Panel({
    layout: ui.Panel.Layout.flow('vertical'),
});

// Add a label to the panel.
inspector.add(
    ui.Label({
        value: 'Click on a location to extract variables',
        style: {
            fontSize: '1.7vmin',
            fontWeight: 'bold',
            textAlign: 'center',
            margin: '0px 0px 0px 0px'
        },
    })
);

// Create main panel.
var panel = ui.Panel();

// Set the width and font style for the main panel.
panel.style().set({
    width: '30%',
    fontSize: '1vw',
    fontWeight: 'bold'
});

// Clear existing map.
ui.root.clear();

// Initiate new map object.
var map = ui.Map();

// Add custom map.
ui.root.add(map);

// Add the main panel to the UI root.
ui.root.insert(1, panel);

// Call the panelcreate function to create the intro panel.
panelcreate();

// Call the reference panel creation function.
referencecreate();

// Load in all relevant datasets.
// PM2.5 data for the year 2020 regridded to the same grids as the
// population estimates.
var PM = ee.Image('users/tirthankar25/PM_2020_regrid');

// Image collection of the original annual mean PM2.5 data.
var pmTime = ee.ImageCollection('projects/gee-datastore/assets/PM25_v5GL03');

// Population data.
var Pop = ee.Image(
  'CIESIN/GPWv411/GPW_Population_Count/gpw_v4_population_count_rev11_2020_30_sec');

// Exceedance factor of PM2.5 concentration.
var exceedanceFactor = ee.Image('users/tirthankar25/PMtimes_2020');

// Define color palette:
var thePalette = [
    '#40004b',
    '#762a83',
    '#9970ab',
    '#c2a5cf',
    '#e7d4e8',
    '#f7f7f7',
    '#d9f0d3',
    '#a6dba0',
    '#5aae61',
    '#1b7837',
    '#00441b'
].reverse();

// Define information about each layer that will be used to visualize it and
// describe it in a selector widget and legend.
var dataInfo = {
    'ex': {
        name: 'Exceedance factor',
        desc: 'Actual concentration of PM‚ÇÇ.‚ÇÖ divided by the WHO standard',
        img: exceedanceFactor,
        vis: {
            min: 1,
            max: 20,
            palette: thePalette,
            opacity: 0.65
        }
    },
    'pm': {
        name: 'PM‚ÇÇ.‚ÇÖ concentration',
        desc: 'Annual average PM‚ÇÇ.‚ÇÖ concentration (¬µg/m3)',
        img: PM,
        vis: {
            min: 10,
            max: 100,
            palette: thePalette,
            opacity: 0.65
        }
    },
    'pop': {
        name: 'Population count',
        desc: 'Number of people',
        img: Pop,
        vis: {
            min: 2000,
            max: 18000,
            palette: thePalette,
            opacity: 0.65
        }
    },
};

// Register a callback on the default map to be invoked when the map is clicked.
map.onClick(function(coords) {
    // Clear the main panel.
    panel.clear();

    // Call the panel creation function again.
    panelcreate();

    // Call the reference panel creation function again.
    referencecreate();

    // Create panels to hold lon/lat and UHI values.
    var lat = ui.Label();
    var lon = ui.Label();
    var Value = ui.Label();
    var pmPix = ui.Label();
    pmPix.style().set('padding', '0px 0px 4px 0px');
    var popPix = ui.Label();
    var efPix = ui.Label();

    // Add panels to show longitude, latitude, and pixel values to the main panel.
    panel.add(ui.Panel([lat, lon], ui.Panel.Layout.flow('horizontal')));
    panel.add(ui.Panel([popPix], ui.Panel.Layout.flow('horizontal')));
    panel.add(ui.Panel([pmPix], ui.Panel.Layout.flow('horizontal')));
    panel.add(ui.Panel([efPix], ui.Panel.Layout.flow('horizontal')));

    // Add a red dot showing the point clicked on.
    var point = ee.Geometry.Point(coords.lon, coords.lat);
    var dot = ui.Map.Layer(point, {
        color: 'red'
    });
    map.layers().set(1, dot);

    // Clear the inspector panel.
    inspector.clear();

    // Show the inspector panel and add a loading label.
    inspector.style().set('shown', true);
    inspector.add(
        ui.Label({
            value: 'Loading...',
            style: {
                color: 'gray',
                fontSize: '1.7vmin',
                fontWeight: 'normal',
                textAlign: 'center',
                margin: '0px 0px 0px 0px'
            },
        })
    );

    // Sample data at the clicked point from the images.
    function getVal(img, point, scale, key, places) {
        var info = ee.Image(img).sample(point, scale).first().getInfo();
        var formattedValue;
        if (info) {
            formattedValue = info.properties[key].toFixed(places);
        } else {
            formattedValue = 'NoData';
        }
        return formattedValue;
    }
    var samplePop = getVal(Pop, point, 300, 'population_count', 0);
    var samplePM = getVal(PM, point, 300, 'b1', 2);
    var sampleEF = getVal(exceedanceFactor, point, 300, 'b1', 2);

    // Update the lon/lat panel with values from the click event.
    lat.setValue('Lat: ' + coords.lat.toFixed(2));
    lon.setValue('Lon: ' + coords.lon.toFixed(2));

    // Update the pmPix, popPix, and efPix panels with their respective values.
    pmPix.setValue('PM‚ÇÇ.‚ÇÖ concentration (¬µg/m3): ' + samplePM);
    popPix.setValue('Population count: ' + samplePop);
    efPix.setValue('Exceedance factor: ' + sampleEF);

    // Create a pmChart line chart.
    // Create a line chart from the pmTime image and point data.
    if (samplePM != 'NoData') {
        var pmChart = ui.Chart.image
            .series(pmTime, point)
            // Set the chart type to be a line chart.
            .setChartType('LineChart');
        pmChart.setOptions({
            // Set the title of the chart.
            title: 'Long-term change in annual PM‚ÇÇ.‚ÇÖ concentration',
            vAxes: {
                0: {
                    // Set the title of the vertical axis.
                    title: 'PM‚ÇÇ.‚ÇÖ concentration (¬µg/m3)',
                    // Set the format of the numbers on the axis.
                    format: '#.##',
                    // Set the style of the text.
                    titleTextStyle: {
                        bold: true,
                        color: '#bd0026',
                        italic: false
                    },
                },
            },
            hAxis: {
                // Set the title of the horizontal axis.
                title: 'Year',
                // Set the format of the numbers on the axis.
                format: 'yyyy',
                // Set the number of gridlines on the axis.
                gridlines: {
                    count: 22
                },
                // Set the style of the text.
                titleTextStyle: {
                    bold: true,
                    italic: false
                },
            },
            // Set the type of curve for the line chart.
            curveType: 'function',
            // Set the color of the line.
            colors: ['#bd0026'],
            // Set the width of the line.
            lineWidth: 3,
            // Set the size of the points on the line chart.
            pointSize: 5,
            // Set the height of the chart area.
            chartArea: {
                height: '53%'
            },
            tooltip: {
                trigger: 'none'
            },
            series: {
                0: {
                    targetAxisIndex: 0,
                    visibleInLegend: false
                },
            },
        });

        // Add the chart to the panel.
        panel.widgets().set(10, pmChart);
    } else {
        // Add a blank label widget if there is no data.
        panel.widgets().set(10, ui.Label());
    }

    // Clear inspector again and display a new label.
    inspector.clear();

    inspector.style().set('shown', true);
    inspector.add(
        // Set the label text.
        ui.Label({
            value: 'Click on another location...',
            style: {
                fontSize: '1.7vmin',
                fontWeight: 'bold',
                textAlign: 'center',
                margin: '0px 0px 0px 0px'
            },
        })
    );
});

var legend = ui.Panel({
    style: {
        position: 'bottom-left',
        width: '25%'
    }
});

// Create a layer selector that dictates which layer is visible on the map.
// The list of possible layers are generated from the data info provided above.
var items = [];
Object.keys(dataInfo).forEach(function(key) {
    items.push({value: key, label: dataInfo[key].name});
});
items.push({value: 'none', label: 'Remove all'});

var select = ui.Select({
    items: items,
    value: items[0].value,
    style: {margin: '8px 0px'}
});

// Redraw function is called when the user changes the selected layer.
function redraw(layer) {
    // Fetch the info that corresponds to the selected layer.
    var info = dataInfo[layer];

    // Reset the layers and the legend.
    map.layers().reset();
    legend.clear();

    // Construct the layer selection widgets.
    legend
    .add(
        ui.Label({
            value: 'Choose display layer:',
            style: {
                fontSize: '14px',
                fontWeight: 'bold',
                textAlign: 'left',
                margin: '4px 0px'
            },
        })
    )
    .add(select);

    // Construct the legend widgets.
    function makeLegend(vis) {
        // Creates a color bar thumbnail image for use in legend from the given
        // color palette.
        function makeColorBarParams(palette) {
            return {
            // Bounding box for color bar.
                bbox: [0, 0, 1, 0.1],
                // Dimensions of color bar.
                dimensions: '100x10',
                // Format of color bar.
                format: 'png',
                // Min value for color bar.
                min: 0,
                // Max value for color bar.
                max: 1,
                // Color palette for color bar.
                palette: palette
            };
        }

        // Create the color bar for the legend.
        var colorBar = ui.Thumbnail({
        // Image to use for color bar.
            image: ee.Image.pixelLonLat().select(0),
            // Parameters for color bar.
            params: makeColorBarParams(vis.palette),
            style: {
                // Stretch color bar horizontally.
                stretch: 'horizontal',
                // No margin for color bar.
                margin: '0px 0px',
                // Max height of color bar.
                maxHeight: '10%',
                // Width of color bar.
                width: '100%'
            },
        });

        // Create a panel with three numbers for the legend.
        var legendLabels = ui.Panel({
            widgets: [
                ui.Label(vis.min, {
                    margin: '0px 0px'
                }),
                ui.Label('10.5', {
                    margin: '0px 0px',
                    textAlign: 'center',
                    stretch: 'horizontal'
                }),
                ui.Label(vis.max, {
                    margin: '0px 0px'
                }),
            ],
            layout: ui.Panel.Layout.flow('horizontal')
        });

        // Add label to legend.
        legend.add(
            ui.Label({
                value: info.desc,
                style: {
                    fontSize: '14px',
                    textAlign: 'left',
                    padding: '0px 0px 4px 0px',
                    margin: '8px 0px'
                },
            })
        );

        // Add colorbar to legend.
        legend.add(colorBar);

        // Add labels to legend.
        legend.add(legendLabels);
    }

    // If layer is none, reset layers on map.
    if (layer == 'none') {
        map.layers().reset();
    } else {
        // Check which layer is selected and create the corresponding legend.
        makeLegend(info.vis);

        // Add layer to map.
        var visImg = info.img.visualize(info.vis);
        map.addLayer(visImg, {}, layer);
    }
}

// Register the `redraw` function to the layer selector.
select.onChange(redraw);

// Invoke the redraw function at start up to initialize the exceedance map.
redraw('ex');

// Add legend to map.
map.add(legend);

// Add the inspector panel to the default map.
map.add(inspector);

// Set basemap options.
map.setOptions('Base', {
    Base: basemapStyle
});

// Set visibility options to remove geometry creator, map type controller,
// and layer list.
map.setControlVisibility({
    all: false,
    layerList: false,
    zoomControl: true,
    scaleControl: true,
    mapTypeControl: false,
    fullscreenControl: false
});

// Set the default map's cursor to a 'crosshair'.
map.style().set('cursor', 'crosshair');
