/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[110.40784521277556, -7.3167508403317845],
          [110.46243353064665, -7.3167508403317845],
          [110.46243353064665, -7.261411753752696],
          [110.40784521277556, -7.261411753752696],
          [110.40784521277556, -7.3167508403317845]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Fungsi untuk mendapatkan citra dengan tanggal paling dekat
function getClosestImage(collection, targetDate) {
  return collection.map(function(image) {
    var imageDate = ee.Date(image.get('system:time_start').format('YYYY-MM-dd')); // Gunakan system:time_start
    var diff = ee.Number(imageDate.difference(targetDate, 'day')).abs(); // Selisih waktu
    return image.set('date_diff', diff);
  }).sort('date_diff').first(); // Citra dengan selisih waktu terkecil
}

// Fungsi untuk masking cloud Sentinel-2 dengan mempertahankan properti awal
function maskS2clouds(image) {
  var qa = image.select("QA60");

  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  var maskedImage = image.updateMask(mask).divide(10000);
  return maskedImage.copyProperties(image, image.propertyNames());
}

// Definisi ROI dan waktu untuk musim
var startDateKemarau = '2024-06-01';
var endDateKemarau = '2024-10-30';


// Koleksi Sentinel-2 untuk musim kemarau dan musim hujan
var sentinel2Kemarau = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 5))
  .map(maskS2clouds)
  .sort('CLOUDY_PIXEL_PERCENTAGE'); // Urutkan berdasarkan tutupan awan terendah

// Koleksi Sentinel-1 untuk musim kemarau dan musim hujan
var sentinel1Kemarau = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau);

// Ambil citra Sentinel-2 pertama sebagai referensi tanggal untuk masing-masing musim
var targetDateKemarau = ee.Date(sentinel2Kemarau.first().get('system:time_start'));

// Ambil citra terdekat untuk setiap musim
var closestS2Kemarau = getClosestImage(sentinel2Kemarau, targetDateKemarau);
var closestS1Kemarau = getClosestImage(sentinel1Kemarau, targetDateKemarau);

// Tambahkan layer untuk setiap musim
Map.addLayer(closestS2Kemarau.clip(roi), {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'Sentinel-2 Kemarau');
Map.addLayer(closestS1Kemarau.clip(roi), {bands: ['VV','VH'], min: -30, max: 5}, 'Sentinel-1 Kemarau');

// Cetak hasil ke konsol
print("Sentinel-2 Kemarau:", closestS2Kemarau);
print("Sentinel-1 Kemarau:", closestS1Kemarau);

