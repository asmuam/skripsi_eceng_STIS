/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[110.40784521277556, -7.3167508403317845],
          [110.46243353064665, -7.3167508403317845],
          [110.46243353064665, -7.261411753752696],
          [110.40784521277556, -7.261411753752696],
          [110.40784521277556, -7.3167508403317845]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Fungsi untuk masking cloud Sentinel-2 dengan mempertahankan properti awal
function maskS2clouds(image) {
  var qa = image.select("QA60");

  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  var maskedImage = image.updateMask(mask).divide(10000);
  return maskedImage.copyProperties(image, image.propertyNames());
}

// Fungsi untuk mencari pasangan Sentinel-1 terdekat berdasarkan koleksi Sentinel-2
function findMatchingS1(s2Collection, s1Collection) {
  return s2Collection.map(function(s2Image) {
    var s2Date = ee.Date(s2Image.get('system:time_start'));
    var matchedS1 = s1Collection
      .filterDate(s2Date, s2Date.advance(1, 'day')) // Cari S1 dengan tanggal sama/terdekat
      .first(); // Ambil citra pertama (jika ada)

    // Tambahkan properti pencocokan
    return s2Image.set({
      matchedS1: ee.Algorithms.If(
        matchedS1, // Jika ditemukan
        matchedS1.get('system:index'), // Ambil indeks S1
        'None' // Jika tidak ada
      )
    });
  });
}

// ROI dan waktu untuk musim
var startDateKemarau = '2024-07-01';
var endDateKemarau = '2024-08-31';
var startDateHujan = '2024-11-01';
var endDateHujan = '2024-12-31';

// Koleksi Sentinel-2 untuk musim kemarau dan hujan
var sentinel2Kemarau = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))
  .map(maskS2clouds)
  .sort('CLOUDY_PIXEL_PERCENTAGE'); // Urutkan berdasarkan tutupan awan terendah

var sentinel2Hujan = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(startDateHujan, endDateHujan)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 50))
  .map(maskS2clouds)
  .sort('CLOUDY_PIXEL_PERCENTAGE'); // Urutkan berdasarkan tutupan awan terendah

// Koleksi Sentinel-1 untuk musim kemarau dan hujan
var sentinel1Kemarau = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau);

var sentinel1Hujan = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(startDateHujan, endDateHujan);

// Cari pasangan Sentinel-1 untuk setiap citra Sentinel-2
var matchedKemarau = findMatchingS1(sentinel2Kemarau, sentinel1Kemarau);
var matchedHujan = findMatchingS1(sentinel2Hujan, sentinel1Hujan);

// Tampilkan hasil yang cocok di peta
matchedKemarau.evaluate(function(results) {
  results.features.forEach(function(feature) {
    var s2Image = ee.Image(feature.id); // Ambil citra Sentinel-2
    var matchedS1 = feature.properties.matchedS1;

    if (matchedS1 !== 'None') {
      var s1Image = ee.Image('COPERNICUS/S1_GRD/' + matchedS1);
      // Tampilkan layer
      Map.addLayer(s2Image.clip(roi), {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'S2 Kemarau ' + feature.id);
      Map.addLayer(s1Image.clip(roi), {bands: ['VV'], min: -30, max: 5}, 'S1 Kemarau ' + matchedS1);
    } else {
      print('No match for S2 Kemarau:', feature.id);
    }
  });
});

matchedHujan.evaluate(function(results) {
  results.features.forEach(function(feature) {
    var s2Image = ee.Image(feature.id); // Ambil citra Sentinel-2
    var matchedS1 = feature.properties.matchedS1;

    if (matchedS1 !== 'None') {
      var s1Image = ee.Image('COPERNICUS/S1_GRD/' + matchedS1);
      // Tampilkan layer
      Map.addLayer(s2Image.clip(roi), {bands: ['B4', 'B3', 'B2'], min: 0, max: 0.3}, 'S2 Hujan ' + feature.id);
      Map.addLayer(s1Image.clip(roi), {bands: ['VV'], min: -30, max: 5}, 'S1 Hujan ' + matchedS1);
    } else {
      print('No match for S2 Hujan:', feature.id);
    }
  });
});

// Cetak hasil ke konsol
print('Matched Kemarau:', matchedKemarau);
print('Matched Hujan:', matchedHujan);
