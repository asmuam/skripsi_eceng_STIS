/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var roi = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[110.40784521277556, -7.3167508403317845],
          [110.46243353064665, -7.3167508403317845],
          [110.46243353064665, -7.261411753752696],
          [110.40784521277556, -7.261411753752696],
          [110.40784521277556, -7.3167508403317845]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Fungsi untuk mencari citra Sentinel-1 dengan tanggal yang sama persis dengan citra Sentinel-2 (tanpa memperhatikan jam)
function getMatchingS1Image(s2Image) {
  var s2Date = ee.Date(s2Image.get('system:time_start')).format('YYYY-MM-dd'); // Ambil hanya tanggal (tanpa jam)
  // Cari citra Sentinel-1 dengan tanggal yang sama persis (hanya tanggal, tanpa jam)
  var matchingS1 = sentinel1Kemarau.filter(ee.Filter.eq('system:time_start', s2Date));
  return matchingS1.size().gt(0) ? matchingS1.first() : null; // Jika ada citra yang cocok, ambil yang pertama, jika tidak, return null
}

// Fungsi untuk masking cloud Sentinel-2 dengan mempertahankan properti awal
function maskS2clouds(image) {
  var qa = image.select("QA60");

  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  var maskedImage = image.updateMask(mask).divide(10000);
  return maskedImage.copyProperties(image, image.propertyNames());
}

// Definisi ROI dan waktu untuk musim
var startDateKemarau = '2024-06-01';
var endDateKemarau = '2024-10-30';

// Koleksi Sentinel-2 untuk musim kemarau
var sentinel2Kemarau = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 5))
  .map(maskS2clouds)
  .sort('system:time_start'); // Urutkan berdasarkan waktu

// Koleksi Sentinel-1 untuk musim kemarau
var sentinel1Kemarau = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate(startDateKemarau, endDateKemarau);

// Iterasi dengan map untuk mencari citra Sentinel-1 yang cocok dengan setiap citra Sentinel-2
var matchedS1Images = sentinel2Kemarau.map(function(s2Image) {
  var matchedS1 = getMatchingS1Image(s2Image);
  return matchedS1 ? matchedS1 : ee.Image(); // Mengembalikan citra kosong jika tidak ada pasangan
});

// Filter hasil untuk menghapus citra yang kosong
matchedS1Images = matchedS1Images.filter(ee.Filter.notNull(['system:time_start'])); // Hanya mempertahankan citra yang valid

print('Citra Sentinel-1 yang cocok:', matchedS1Images);
