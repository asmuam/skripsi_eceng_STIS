/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var danau_tondano = 
    /* color: #d63000 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[124.91058625445355, 1.2899192526534362],
                  [124.89788331255902, 1.27344388349804],
                  [124.89513673052777, 1.2525062834159675],
                  [124.87728394732464, 1.2418657994172488],
                  [124.86286439166058, 1.2387766186035416],
                  [124.85565461382855, 1.221271192891622],
                  [124.85084809527386, 1.1999899337214772],
                  [124.86698426470745, 1.1931249759468696],
                  [124.88174714312542, 1.180424758976069],
                  [124.88552369341839, 1.1670379810080265],
                  [124.89307679400433, 1.1663514778499982],
                  [124.90543641314495, 1.1763057572008087],
                  [124.91058625445355, 1.1903789880348548],
                  [124.91264619097699, 1.209600845638446],
                  [124.9188260005473, 1.224703638343631],
                  [124.93324555621136, 1.2387766186035416],
                  [124.93770875201214, 1.2765330232775665]]]),
            {
              "system:index": "0"
            })]),
    danau_limboto = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[122.95580539671738, 0.5620881634284192],
                  [122.99923572540244, 0.5444078658217878],
                  [123.01691684735557, 0.5471543232577101],
                  [123.02069339768289, 0.5631180820419548],
                  [123.0201784135593, 0.5874927687753221],
                  [123.01477108015074, 0.6058595401871374],
                  [123.01099452983078, 0.6146137739278414],
                  [123.00586614861626, 0.6178536975474171],
                  [122.99966487886171, 0.6192483624678031],
                  [122.988506889269, 0.6087776196873481],
                  [122.97923717483988, 0.6074044060035434],
                  [122.96842250800815, 0.5977919004917115],
                  [122.96275768252923, 0.5816565856966206],
                  [122.95400295223678, 0.584746330434298],
                  [122.94825229396686, 0.5828581521568795],
                  [122.94353160816694, 0.5768503127330539]]]),
            {
              "system:index": "0"
            })]),
    danau_toba = 
    /* color: #ffc82d */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[98.70427907564945, 2.8943490253296513],
                  [98.59304250338383, 2.924522483891105],
                  [98.51064504244633, 2.908064333864607],
                  [98.4982854233057, 2.8422293457070307],
                  [98.5092717514307, 2.780505631591385],
                  [98.5916692123682, 2.670766655752414],
                  [98.58892263033695, 2.6350993579135293],
                  [98.6630803451807, 2.5226035588932603],
                  [98.7344914779932, 2.4457715407948606],
                  [98.78667653658695, 2.3579581392677595],
                  [98.84160817721195, 2.2811168595264517],
                  [99.11077321627445, 2.316793686897715],
                  [99.2178899154932, 2.4320510704817093],
                  [99.04485524752445, 2.5678774529950124],
                  [98.9377385483057, 2.7270091310813966]]]),
            {
              "system:index": "0"
            })]),
    danau_singkarak = 
    /* color: #00ffff */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[100.49323020903967, -0.5315602984613461],
                  [100.47778068511388, -0.5404862994245473],
                  [100.47675071685217, -0.5597114874310153],
                  [100.48293052642248, -0.5827129686637675],
                  [100.49700675933263, -0.6136103322923304],
                  [100.5224126431217, -0.6541199372831168],
                  [100.55914817778967, -0.6966889999674252],
                  [100.58627067534826, -0.7049281296976152],
                  [100.60584007232092, -0.6935993225951143],
                  [100.60378013579748, -0.6757478141191375],
                  [100.58180747954748, -0.6088040872206985],
                  [100.55743156402013, -0.5562784227037256],
                  [100.53030906646154, -0.5404862994245473],
                  [100.50318656890295, -0.5308736824654946]]]),
            {
              "system:index": "0"
            })]),
    geometry2 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[107.30742952316542, -6.483820934300463],
          [107.26932069748183, -6.542832403982252],
          [107.26829072922011, -6.6202530559962],
          [107.28545686691542, -6.663903410317513],
          [107.3166992375209, -6.668336432528023],
          [107.32699892013808, -6.647875995871645],
          [107.32356569259902, -6.587853811742368],
          [107.36373445480605, -6.574211391055033],
          [107.39806673019667, -6.595356983267239],
          [107.43171236007949, -6.579327342725666],
          [107.42209932297011, -6.545902174633193],
          [107.40252992599746, -6.511589986571398],
          [107.35858461349746, -6.490440848209482]]]),
    table = ee.FeatureCollection("projects/ee-222111840/assets/DANAU_AR_25K");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
function maskS2clouds(image) {  
  var qa = image.select('QA60');
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  var mask = qa
    .bitwiseAnd(cloudBitMask)
    .eq(0)
    .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  var maskedImage = image.updateMask(mask).divide(10000);
  return maskedImage.copyProperties(image, image.propertyNames());
}                                            // Function for masking Sentinel-2 clouds while preserving initial properties

function findMatchingDates(sentinel1, sentinel2, range) {
  var sentinel1List = sentinel1.toList(sentinel1.size());
  var sentinel2List = sentinel2.toList(sentinel2.size());

  // Loop through Sentinel-1 images to find matches in Sentinel-2
  var matchingImages = sentinel1List.map(function(s1) {
    var s1Date = ee.Date(ee.Image(s1).get('system:time_start'));

    // Check for matches within Â±1 day in Sentinel-2
    var matchedImages = sentinel2List.map(function(s2) {
      var s2Date = ee.Date(ee.Image(s2).get('system:time_start'));
      var diffDays = s1Date.difference(s2Date, 'day').abs(); // Calculate difference in days
      return ee.Algorithms.If(diffDays.lte(range), {
        sentinel1: s1,
        sentinel2: s2
      }, null);
    });

    // Filter out null matches manually
    var filteredMatches = matchedImages.map(function(item) {
      return ee.Algorithms.If(item, item, null);
    });

    // Flatten results into a single list
    return filteredMatches;
  });

  // Flatten the list of matching images
  var flattenedResults = matchingImages.flatten();

  // Use `.filter()` to remove null values
  var nonNullResults = flattenedResults.filter(ee.Filter.neq('item', null));

  return nonNullResults;
}

// Clip the shapefile using the geometry2
var clippedTable = table.map(function(feature) {
  return feature.intersection(geometry2, ee.ErrorMargin(1));
});

// Parameter umum
var roi = clippedTable; // Ganti ROI dengan wilayah yang Anda pilih
var cloudThreshold = 5; // Persentase maksimum piksel berawan


//  Sentinel-2 collection
var sentinel2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
  .filterBounds(roi)
  .filterDate('2017-03-28', '2025-12-31') 
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', cloudThreshold))
  .map(maskS2clouds)
  .sort('system:time_start');

//  Sentinel-1 collection
var sentinel1 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterBounds(roi)
  .filterDate('2017-03-28', '2025-12-31') 
  .sort('system:time_start');

// Ubah ROI menjadi geometri tunggal (contoh jika ROI adalah FeatureCollection)
var roiGeometry = roi.geometry(); // Mengambil geometri tunggal dari ROI

// Fungsi untuk memfilter citra yang sepenuhnya mencakup ROI
function filterFullCoverage(imageCollection, roiGeom) {
  return imageCollection.filter(ee.Filter.contains({
    leftField: '.geo', // Geometri dari citra
    rightValue: roiGeom // Geometri ROI
  }));
}

// Koleksi Sentinel-2 dengan filter cakupan penuh
var sentinel2FullCoverage = filterFullCoverage(sentinel2, roiGeometry);

// Koleksi Sentinel-1 dengan filter cakupan penuh
var sentinel1FullCoverage = filterFullCoverage(sentinel1, roiGeometry);

var sentinel2List = sentinel2.toList(sentinel2.size());                       
var sentinel1List = sentinel1.toList(sentinel1.size());                      
var image_sen2 = ee.Image(sentinel2List.get(14));     
var image_sen1 = ee.Image(sentinel1List.get(365));     

print(sentinel2List)
print(sentinel1List)

// Panggil fungsi untuk mencari citra yang cocok
var matchedDates = findMatchingDates(sentinel1FullCoverage, sentinel2FullCoverage, 1);

print(matchedDates);

// Gabungkan citra Sentinel-1 dan Sentinel-2
var combinedImage = image_sen2.addBands(image_sen1.select(['VV', 'VH']));

// VIs
var ndvi = combinedImage 
  .expression('(NIR - RED) / (NIR + RED)', {
    RED: combinedImage .select('B4'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDVI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var gndvi = combinedImage 
  .expression('(NIR - GREEN) / (NIR + GREEN)', {
    GREEN: combinedImage .select('B3'),
    NIR: combinedImage .select('B8'),
  })
  .rename('GNDVI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var evi = combinedImage 
  .expression('2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
    RED: combinedImage .select('B4'),
    NIR: combinedImage .select('B8'),
    BLUE: combinedImage .select('B2'),
  })
  .rename('EVI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var savi = combinedImage 
  .expression('((NIR - RED) * (1 + L)) / (NIR + RED + L)', {
    RED: combinedImage .select('B4'),
    NIR: combinedImage .select('B8'),
    L: 0.5,
  })
  .rename('SAVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var wavi = combinedImage 
  .expression('((NIR - BLUE) * (1 + L)) / (NIR + BLUE + L)', {
    NIR: combinedImage .select('B8'),
    BLUE: combinedImage .select('B2'),
    L: 0.5,
  })
  .rename('WAVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var rendvi = combinedImage 
  .expression('(NIR - RE) / (NIR + RE)', {
    NIR: combinedImage .select('B8'),
    RE: combinedImage .select('B5'),
  })
  .rename('RENDVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var ndii = combinedImage    // 819/1600
  .expression('(NIR - SWIR1) / (NIR + SWIR1)', {
    SWIR1: combinedImage .select('B11'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDII')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var ndavi = combinedImage 
  .expression('(NIR - BLUE) / (NIR + BLUE)', {
    NIR: combinedImage .select('B8'),
    BLUE: combinedImage .select('B2'),
  })
  .rename('NDAVI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var lswi = combinedImage 
  .expression('(NIR - SWIR1) / (NIR + SWIR1)', {
    NIR: combinedImage .select('B8'),
    SWIR1: combinedImage .select('B11'),
  })
  .rename('LSWI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var fai = combinedImage     // fai https://custom-scripts.sentinel-hub.com/custom-scripts/sentinel-2/apa_script/
  .expression('NIR - (RED + (SWIR1 - RED) * ((832.8 - 664.6) / (1613.7 - 664.6)))', {
    RED: combinedImage .select('B4'), // Red
    NIR: combinedImage .select('B8'), // NIR
    SWIR1: combinedImage .select('B11'), // SWIR
  })
  .rename('FAI')
  .copyProperties(combinedImage , combinedImage .propertyNames())

// WIs
var ndwi = combinedImage 
  .expression('(GREEN - NIR) / (GREEN + NIR)', {
    GREEN: combinedImage .select('B3'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDWI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var mndwi = combinedImage 
  .expression('(GREEN - SWIR1) / (GREEN + SWIR1)', {
    GREEN: combinedImage .select('B3'),
    SWIR1: combinedImage .select('B11'),
  })
  .rename('MNDWI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
  
// Built-Up Indices
var ndbi = combinedImage 
  .expression('(SWIR2 - NIR) / (SWIR2 + NIR)', {
    SWIR2: combinedImage .select('B12'),
    NIR: combinedImage .select('B8'),
  })
  .rename('NDBI')
  .copyProperties(combinedImage , combinedImage .propertyNames());
var nbai = combinedImage 
  .expression('((SWIR2 - SWIR1) / GREEN) / ((SWIR2 + SWIR1) / GREEN)', {
    SWIR2: combinedImage .select('B12'),
    SWIR1: combinedImage .select('B11'),
    GREEN: combinedImage .select('B3'),
  })
  .rename('NBAI')
  .copyProperties(combinedImage , combinedImage .propertyNames()); 
var nbi = combinedImage 
  .expression('(RED * SWIR2) / (NIR)', {
    SWIR2: combinedImage .select('B12'),
    NIR: combinedImage .select('B8'),
    RED: combinedImage .select('B4'),
  })
  .rename('NBI')
  .copyProperties(combinedImage , combinedImage .propertyNames()); 
// Soil indices
var bsi = combinedImage 
  .expression(
    '((SWIR1 + RED) - (NIR + BLUE)) / ((SWIR1 + RED) + (NIR + BLUE))',
    {
      RED: combinedImage .select('B4'),
      SWIR1: combinedImage .select('B11'),
      NIR: combinedImage .select('B8'),
      BLUE: combinedImage .select('B2'),
    }
  )
  .rename('BSI')
  .copyProperties(combinedImage , combinedImage .propertyNames())
var ndbsi = combinedImage .expression(
  '(k < 0) ? -((SWIR1 - Blue) / (SWIR1 + Blue)) : ((SWIR1 - Blue) / (SWIR1 + Blue))', {
    'SWIR1': combinedImage .select('B11'),
    'Blue': combinedImage .select('B2'),
    'k': combinedImage .expression(
      '(1 - ((SWIR1 - NIR) / (3 * abs(NIR - Red)))) * (Red - Green)', {
        'SWIR1': combinedImage .select('B11'),
        'NIR': combinedImage .select('B8'),
        'Red': combinedImage .select('B4'),
        'Green': combinedImage .select('B3')
      })
  }
).rename('NDBSI')
.copyProperties(combinedImage , combinedImage .propertyNames());

// radar
var vv_vh_ratio = combinedImage
  .expression('VV / VH', {
    VV: combinedImage.select('VV'),
    VH: combinedImage.select('VH'),
  })
  .rename('VV_VH_ratio')
  .copyProperties(combinedImage, combinedImage.propertyNames())

var vv_vh_diff = combinedImage
  .expression('VV - VH', {
    VV: combinedImage.select('VV'),
    VH: combinedImage.select('VH'),
  })
  .rename('VV_VH_diff')
  .copyProperties(combinedImage, combinedImage.propertyNames());

var vv_vh_mean = combinedImage
  .expression('(VV + VH) / 2', {
    VV: combinedImage.select('VV'),
    VH: combinedImage.select('VH'),
  })
  .rename('VV_VH_mean')
  .copyProperties(combinedImage, combinedImage.propertyNames());
  

combinedImage  = combinedImage.addBands([
  ndvi,
  gndvi,
  evi,
  savi,
  wavi,
  rendvi,
  ndii,
  ndavi,
  ndwi,
  mndwi,
  lswi,
  fai,
  ndbi,
  nbai,
  nbi,
  bsi,
  ndbsi,
  vv_vh_ratio,
  vv_vh_mean,
  vv_vh_diff
]);    // Merge all indices into a Sentinel-2 image

combinedImage = combinedImage.toFloat();

var sen2_bands = [
  'B1',
  'B2',
  'B3',
  'B4',
  'B5',
  'B6',
  'B7',
  'B8',
  'B8A',
  'B9',
  'B11',
  'B12',
  'NDVI',
  'GNDVI',
  'EVI',
  'SAVI',
  'WAVI',
  'RENDVI',
  'NDWI',
  'MNDWI',
  'LSWI',
  'NDAVI',
  'FAI',
  'NDBI',
  'NBAI',
  'NBI',
  'BSI',
  'NDII',
  'NDBSI',
]
var sen1_bands = ['VV', 'VH','VV_VH_ratio', 'VV_VH_diff', 'VV_VH_mean']

// Select bands for Sentinel-1
var sentinel1Image = combinedImage.select(['VV', 'VH', 'VV_VH_ratio', 'VV_VH_diff', 'VV_VH_mean']);

// Select bands for Sentinel-2
var sentinel2Image = combinedImage.select([
  'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B9',
  'B11', 'B12', 'NDVI', 'GNDVI', 'EVI', 'SAVI', 'WAVI', 'RENDVI',
  'NDWI', 'MNDWI', 'LSWI', 'NDAVI', 'FAI', 'NDBI', 'NBAI', 'NBI',
  'BSI', 'NDII', 'NDBSI'
]);

// Ekspor ke Google Drive
Export.image.toDrive({
  image: combinedImage.clip(roi),
  description: 'waduk_jatiluhur_image_drive_20230928',
  folder: 'GEE_Exports',
  fileNamePrefix: 'waduk_jatiluhur_image',
  region: roi,
  scale: 10,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true}
});

// Ekspor Sentinel-1 saja ke Google Drive
Export.image.toDrive({
  image: sentinel1Image.clip(roi),
  description: 'waduk_jatiluhur_sentinel1_drive_20230928',
  folder: 'GEE_Exports',
  fileNamePrefix: 'waduk_jatiluhur_sentinel1',
  region: roi,
  scale: 10,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true}
});

// Ekspor Sentinel-2 saja ke Google Drive
Export.image.toDrive({
  image: sentinel2Image.clip(roi),
  description: 'waduk_jatiluhur_sentinel2_drive_20230928',
  folder: 'GEE_Exports',
  fileNamePrefix: 'waduk_jatiluhur_sentinel2',
  region: roi,
  scale: 10,
  fileFormat: 'GeoTIFF',
  formatOptions: {cloudOptimized: true}
});

// Ekspor ke Aset
Export.image.toAsset({
  image: combinedImage.clip(roi),
  description: 'waduk_jatiluhur_image_asset_20230928',
  assetId: 'projects/ee-222111840/assets/waduk_jatiluhur_image',
  region: roi,
  scale: 10
});

// Ekspor Sentinel-1 saja ke Aset
Export.image.toAsset({
  image: sentinel1Image.clip(roi),
  description: 'waduk_jatiluhur_sentinel1_asset_20230928',
  assetId: 'projects/ee-222111840/assets/waduk_jatiluhur_sentinel1',
  region: roi,
  scale: 10
});

// Ekspor Sentinel-2 saja ke Aset
Export.image.toAsset({
  image: sentinel2Image.clip(roi),
  description: 'waduk_jatiluhur_sentinel2_asset_20230928',
  assetId: 'projects/ee-222111840/assets/waduk_jatiluhur_sentinel2',
  region: roi,
  scale: 10
});

// Menampilkan Layer RGB (Band 4, 3, 2 untuk RGB di Sentinel-2)
Map.centerObject(roi, 10);
Map.addLayer(combinedImage.clip(roi), { bands: ['B4', 'B3', 'B2'], max: 0.3 }, 'Sentinel-2 RGB');

// Menampilkan Layer Radar (VV, VH, dan rasio VV/VH)
Map.addLayer(combinedImage.clip(roi), {
  bands: ['VV', 'VH', 'VV_VH_ratio'],
  min: -20, max: 0,
  gamma: 1.4
}, 'Sentinel-1 Radar');
